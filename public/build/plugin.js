/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/custom.js":
/*!*****************************!*\
  !*** ./assets/js/custom.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// jQuery
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// var automaticGeoLocation = false;
var resizeId;
$(document).ready(function ($) {
  "use strict";

  //  Geo Location button
  //
  //     if( $(".geo-location").length > 0 && $(".map").length === 0 ){
  //         $("body").append("<div id='map-helper' style='display: none'></div>");
  //         var map = new google.maps.Map(document.getElementById("map-helper"));
  //         autoComplete(map);
  //     }

  //  Selectize

  // Initial code
  $("[data-enable-search=true]").each(function () {
    $(this).selectize({
      onDropdownOpen: dropdownOpen,
      onDropdownClose: dropdownClose,
      allowEmptyOption: false
    });
  });

  // var select = $("select");
  // select.selectize({
  //     onDropdownOpen: dropdownOpen,
  //     onDropdownClose: dropdownClose,
  //     allowEmptyOption: true,
  // });

  $("select.tize").each(function () {
    $(this).selectize({
      onDropdownOpen: dropdownOpen,
      onDropdownClose: dropdownClose,
      allowEmptyOption: true
    });
  });
  $("select.change-tab").each(function () {
    $(this).selectize({
      onDropdownOpen: dropdownOpen,
      onDropdownClose: dropdownClose,
      allowEmptyOption: true
    });
  });
  function dropdownOpen($dropdown) {
    $dropdown.addClass("opening");
  }
  function dropdownClose($dropdown) {
    $dropdown.removeClass("opening");
  }

  //  Disable inputs in the non-active tab

  $(".form-slide:not(.active) input, .form-slide:not(.active) select, .form-slide:not(.active) textarea").prop("disabled", true);

  //  Change tab button

  $("select.change-tab").each(function () {
    var _this = $(this);
    if ($(this).find(".item").attr("data-value") !== "") {
      changeTab(_this);
    }
  });
  $(".change-tab").on("change", function () {
    changeTab($(this));
  });
  $(".box").each(function () {
    if ($(this).find(".background .background-image").length) {
      $(this).css("background-color", "transparent");
    }
  });

  //  Star Rating

  $(".rating").each(function () {
    for (var i = 0; i < 5; i++) {
      if (i < $(this).attr("data-rating")) {
        $(this).append("<i class='active fa fa-star'></i>");
      } else {
        $(this).append("<i class='fa fa-star'></i>");
      }
    }
  });

  //  Button for class changing

  $(".change-class").on("click", function (e) {
    e.preventDefault();
    var parentClass = $("." + $(this).attr("data-parent-class"));
    parentClass.removeClass($(this).attr("data-change-from-class"));
    parentClass.addClass($(this).attr("data-change-to-class"));
    $(this).parent().find(".change-class").removeClass("active");
    $(this).addClass("active");
    // readMore();
  });

  if ($(".masonry").length) {
    $(".items.masonry").masonry({
      itemSelector: ".item",
      transitionDuration: 0
    });
  }
  $(".ribbon-featured").each(function () {
    var thisText = $(this).text();
    $(this).html("");
    $(this).append("<div class='ribbon-start'></div>" + "<div class='ribbon-content'>" + thisText + "</div>" + "<div class='ribbon-end'>" + "<figure class='ribbon-shadow'></figure>" + "</div>");
  });

  //  File input styling

  if ($("input[type=file].with-preview").length) {
    $("input.file-upload-input").MultiFile({
      list: ".file-upload-previews",
      max: 12,
      maxfile: 1024,
      maxsize: 12288,
      accept: 'jpeg|jpg|png',
      // STRING: collection lets you show messages in different languages
      STRING: {
        // remove: 'x',
        denied: 'Vous ne pouvez pas sélectionner un fichier $ext.\nRéessayer...',
        file: '$file',
        selected: 'Fichier sélectionné: $file',
        duplicate: 'Ce fichier a déjà été sélectionné:\n$file',
        toomuch: 'Les fichiers sélectionnés dépassent la taille maximale autorisée ($size)',
        toomany: 'Trop de fichiers sélectionnés (max: $max)',
        toobig: '$file est trop gros (max $size)'
      }
    });
  }
  $(".single-file-input input[type=file]").change(function () {
    previewImage(this);
  });
  $(".has-child a[href='#'].nav-link").on("click", function (e) {
    e.preventDefault();
    if (!$(this).parent().hasClass("hover")) {
      $(this).parent().addClass("hover");
    } else {
      $(this).parent().removeClass("hover");
    }
  });
  if ($(".owl-carousel").length) {
    var galleryCarousel = $(".gallery-carousel");
    galleryCarousel.owlCarousel({
      loop: false,
      margin: 0,
      nav: true,
      items: 1,
      navText: ["<i class='fa fa-chevron-left'></i>", "<i class='fa fa-chevron-right'></i>"],
      autoHeight: true,
      dots: false
    });
    $(".tabs-slider").owlCarousel({
      loop: false,
      margin: 0,
      nav: false,
      items: 1,
      autoHeight: true,
      dots: false,
      mouseDrag: true,
      touchDrag: false,
      pullDrag: false,
      freeDrag: false
    });
    $(".full-width-carousel").owlCarousel({
      loop: true,
      margin: 10,
      nav: true,
      items: 3,
      navText: ["<i class='fa fa-chevron-left'></i>", "<i class='fa fa-chevron-right'></i>"],
      autoHeight: false,
      center: true,
      dots: false,
      autoWidth: true,
      responsive: {
        768: {
          items: 3
        },
        0: {
          items: 1,
          center: false,
          margin: 0,
          autoWidth: false
        }
      }
    });
    $(".gallery-carousel-thumbs").owlCarousel({
      loop: false,
      margin: 20,
      nav: false,
      dots: true,
      items: 5,
      URLhashListener: true
    });
    $("a.owl-thumb").on("click", function () {
      $("a.owl-thumb").removeClass("active-thumb");
      $(this).addClass("active-thumb");
    });
    galleryCarousel.on('translated.owl.carousel', function () {
      var hash = $(this).find(".active").find("img").attr("data-hash");
      $(".gallery-carousel-thumbs").find("a[href='#" + hash + "']").trigger("click");
    });
  }

  //  Bootstrap tooltip initialization

  $('[data-toggle="tooltip"]').tooltip();

  //  iCheck

  $("input[type=checkbox], input[type=radio]").iCheck();
  var framedInputRadio = $(".framed input[type=radio]");
  framedInputRadio.on('ifChecked', function () {
    $(this).closest(".framed").addClass("active");
  });
  framedInputRadio.on('ifUnchecked', function () {
    $(this).closest(".framed").removeClass("active");
  });

  //  "img" into "background-image" transfer

  $("[data-background-image]").each(function () {
    $(this).css("background-image", "url(" + $(this).attr("data-background-image") + ")");
  });
  $(".background-image").each(function () {
    $(this).css("background-image", "url(" + $(this).find("img").attr("src") + ")");
  });

  //  Custom background color

  $("[data-background-color]").each(function () {
    $(this).css("background-color", $(this).attr("data-background-color"));
  });

  //  Form Validation

  // $(".form.email .btn[type='submit']").on("click", function(e){
  //     var button = $(this);
  //     var form = $(this).closest("form");
  //     button.prepend("<div class='status'></div>");
  //     form.validate({
  //         submitHandler: function() {
  //             $.post("assets/php/email.php", form.serialize(),  function(response) {
  //                 button.find(".status").append(response);
  //                 form.addClass("submitted");
  //             });
  //             return false;
  //         }
  //     });
  // });

  //  No UI Slider -------------------------------------------------------------------------------------------------------

  if ($('.ui-slider').length > 0) {
    $.getScript("assets/js/jquery.nouislider.all.min.js", function () {
      $('.ui-slider').each(function () {
        if ($("body").hasClass("rtl")) var rtl = "rtl";else rtl = "ltr";
        var step;
        if ($(this).attr('data-step')) {
          step = parseInt($(this).attr('data-step'));
        } else {
          step = 10;
        }
        var sliderElement = $(this).attr('id');
        var element = $('#' + sliderElement);
        var valueMin = parseInt($(this).attr('data-value-min'));
        var valueMax = parseInt($(this).attr('data-value-max'));
        $(this).noUiSlider({
          start: [valueMin, valueMax],
          connect: true,
          direction: rtl,
          range: {
            'min': valueMin,
            'max': valueMax
          },
          step: step
        });
        if ($(this).attr('data-value-type') == 'price') {
          if ($(this).attr('data-currency-placement') == 'before') {
            $(this).Link('lower').to($(this).children('.values').children('.value-min'), null, wNumb({
              prefix: $(this).attr('data-currency'),
              decimals: 0,
              thousand: '.'
            }));
            $(this).Link('upper').to($(this).children('.values').children('.value-max'), null, wNumb({
              prefix: $(this).attr('data-currency'),
              decimals: 0,
              thousand: '.'
            }));
          } else if ($(this).attr('data-currency-placement') == 'after') {
            $(this).Link('lower').to($(this).children('.values').children('.value-min'), null, wNumb({
              postfix: $(this).attr('data-currency'),
              decimals: 0,
              thousand: ' '
            }));
            $(this).Link('upper').to($(this).children('.values').children('.value-max'), null, wNumb({
              postfix: $(this).attr('data-currency'),
              decimals: 0,
              thousand: ' '
            }));
          }
        } else {
          $(this).Link('lower').to($(this).children('.values').children('.value-min'), null, wNumb({
            decimals: 0
          }));
          $(this).Link('upper').to($(this).children('.values').children('.value-max'), null, wNumb({
            decimals: 0
          }));
        }
      });
    });
  }

  //  Read More

  // readMore();

  footerHeight();
  $("form").each(function () {
    $(this).validate({
      messages: {
        name: "Entrez votre nom de famille",
        prenom: "Entrez votre prénom",
        phone: "Entrez votre numéro de téléphone",
        ville: "Selectionez votre ville",
        email: "Entrez votre adresse mail",
        password: "Entrez votre mot de passe",
        password_confirmation: "Confirmez votre mot de passe",
        rccm: "Entrez votre numéro d'immatriculation au registre du commerce ou votre identité fiscale unique ",
        raison_social: "Entrez le nom de votre société"
      }
    });
  });
});
$(window).on("resize", function () {
  clearTimeout(resizeId);
  resizeId = setTimeout(doneResizing, 250);
});

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Do after resize

function doneResizing() {
  footerHeight();
}

// Change Tab

function changeTab(_this) {
  var parameters = _this.data("selectize").items[0];
  var changeTarget = $("#" + _this.attr("data-change-tab-target"));
  var slide = changeTarget.find(".form-slide");
  if (parameters === "") {
    slide.removeClass("active");
    slide.first().addClass("default");
    changeTarget.find("input").prop("disabled", true);
    changeTarget.find("select").prop("disabled", true);
    changeTarget.find("textarea").prop("disabled", true);
  } else {
    slide.removeClass("default");
    slide.removeClass("active");
    changeTarget.find("input").prop("disabled", true);
    changeTarget.find("select").prop("disabled", true);
    changeTarget.find("textarea").prop("disabled", true);
    changeTarget.find("#" + parameters).addClass("active");
    changeTarget.find("#" + parameters + " input").prop("disabled", false);
    changeTarget.find("#" + parameters + " textarea").prop("disabled", false);
    changeTarget.find("#" + parameters + " select").prop("disabled", false);
  }
}

// Footer Height

function footerHeight() {
  if (!viewport.is("xs")) {
    var footer = $(".footer");
    var footerHeight = footer.height() + parseInt(footer.css("padding-top"), 10) + parseInt(footer.css("padding-bottom"), 10);
    $(".page >.content").css("margin-bottom", footerHeight + "px");
  } else if (viewport.is("xs")) {
    $(".page >.content").css("margin-bottom", "0px");
  }
}

// Read More

// function readMore() {
//     $(".read-more").each(function(){
//         var readMoreLink = $(this).attr("data-read-more-link-more");
//         var readLessLink = $(this).attr("data-read-more-link-less");
//         var collapseHeight = $(this).find(".item:first").height() + parseInt( $(this).find(".item:first").css("margin-bottom"), 10 );
//         $(".read-more").readmore({
//             moreLink: '<div class="center"><a href="#" class="btn btn-primary btn-rounded btn-framed">' + readMoreLink + '</a></div>',
//             lessLink: '<div class="center"><a href="#" class="btn btn-primary btn-rounded btn-framed">' + readLessLink + '</a></div>',
//             collapsedHeight: 500
//         });
//     });
// }

// Google Map

// function simpleMap(latitude, longitude, markerImage, mapTheme, mapElement, markerDrag){
//     if (!markerDrag){
//         markerDrag = false;
//     }
//     if ( mapTheme === "light" ){
//         var mapStyles = [{"featureType":"administrative.locality","elementType":"all","stylers":[{"hue":"#c79c60"},{"saturation":7},{"lightness":19},{"visibility":"on"}]},{"featureType":"landscape","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":-100},{"lightness":100},{"visibility":"simplified"}]},{"featureType":"poi","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":-100},{"lightness":100},{"visibility":"off"}]},{"featureType":"road","elementType":"geometry","stylers":[{"hue":"#c79c60"},{"saturation":-52},{"lightness":-10},{"visibility":"simplified"}]},{"featureType":"road","elementType":"labels","stylers":[{"hue":"#c79c60"},{"saturation":-93},{"lightness":31},{"visibility":"on"}]},{"featureType":"road.arterial","elementType":"labels","stylers":[{"hue":"#c79c60"},{"saturation":-93},{"lightness":-2},{"visibility":"simplified"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"hue":"#c79c60"},{"saturation":-52},{"lightness":-10},{"visibility":"simplified"}]},{"featureType":"transit","elementType":"all","stylers":[{"hue":"#c79c60"},{"saturation":10},{"lightness":69},{"visibility":"on"}]},{"featureType":"water","elementType":"all","stylers":[{"hue":"#c79c60"},{"saturation":-78},{"lightness":67},{"visibility":"simplified"}]}];
//     }
//     else if ( mapTheme === "dark" ){
//         mapStyles = [{"featureType":"all","elementType":"labels.text.fill","stylers":[{"saturation":36},{"color":"#000000"},{"lightness":40}]},{"featureType":"all","elementType":"labels.text.stroke","stylers":[{"visibility":"on"},{"color":"#000000"},{"lightness":16}]},{"featureType":"all","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"administrative","elementType":"geometry.fill","stylers":[{"color":"#000000"},{"lightness":20}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"color":"#000000"},{"lightness":17},{"weight":1.2}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":20}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":21}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#000000"},{"lightness":17}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#000000"},{"lightness":29},{"weight":0.2}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":18}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":16}]},{"featureType":"transit","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":19}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":17}]}]
//     }
//     var mapCenter = new google.maps.LatLng(latitude,longitude);
//     var mapOptions = {
//         zoom: 13,
//         center: mapCenter,
//         disableDefaultUI: false,
//         scrollwheel: false,
//         styles: mapStyles
//     };
//     var element = document.getElementById(mapElement);
//     var map = new google.maps.Map(element, mapOptions);
//     var marker = new google.maps.Marker({
//         position: new google.maps.LatLng(latitude,longitude),
//         map: map,
//         icon: markerImage,
//         draggable: markerDrag
//     });
//
//     google.maps.event.addListener(marker, 'dragend', function(){
//         var latitudeInput = $('#latitude');
//         var longitudeInput = $("#longitude");
//         if( latitudeInput.length ){
//             latitudeInput.val( marker.getPosition().lat() );
//         }
//         if( longitudeInput.length ){
//             longitudeInput.val( marker.getPosition().lng() );
//         }
//     });
//
//     autoComplete(map, marker);
//
// }

//Autocomplete ---------------------------------------------------------------------------------------------------------

// function autoComplete(map, marker){
//     if( $("#input-location").length ){
//         if( !map ){
//             map = new google.maps.Map(document.getElementById("input-location"));
//         }
//         var mapCenter;
//         var input = document.getElementById('input-location');
//         var autocomplete = new google.maps.places.Autocomplete(input);
//         autocomplete.bindTo('bounds', map);
//         google.maps.event.addListener(autocomplete, 'place_changed', function() {
//             var place = autocomplete.getPlace();
//             if (!place.geometry) {
//                 return;
//             }
//             if (place.geometry.viewport) {
//                 map.fitBounds(place.geometry.viewport);
//             } else {
//                 map.setCenter(place.geometry.location);
//                 map.setZoom(17);
//             }
//             mapCenter = place.geometry.location;
//             if( marker ){
//                 marker.setPosition(place.geometry.location);
//                 marker.setVisible(true);
//                 $('#latitude').val( marker.getPosition().lat() );
//                 $('#longitude').val( marker.getPosition().lng() );
//             }
//             var address = '';
//             if (place.address_components) {
//                 address = [
//                     (place.address_components[0] && place.address_components[0].short_name || ''),
//                     (place.address_components[1] && place.address_components[1].short_name || ''),
//                     (place.address_components[2] && place.address_components[2].short_name || '')
//                 ].join(' ');
//             }
//         });
//
//         $('.geo-location').on("click", function(e) {
//             e.preventDefault();
//             if (navigator.geolocation) {
//                 navigator.geolocation.getCurrentPosition(success);
//             } else {
//                 console.log('Geo Location is not supported');
//             }
//         });
//
//         function success(position) {
//             var locationCenter = new google.maps.LatLng( position.coords.latitude, position.coords.longitude);
//             map.setCenter( locationCenter );
//             map.setZoom(14);
//             if(marker){
//                 marker.setPosition(locationCenter);
//             }
//
//             var geocoder = new google.maps.Geocoder();
//             geocoder.geocode({
//                 "latLng": locationCenter
//             }, function (results, status) {
//                 if (status === google.maps.GeocoderStatus.OK) {
//                     var lat = results[0].geometry.location.lat(),
//                         lng = results[0].geometry.location.lng(),
//                         placeName = results[0].address_components[0].long_name,
//                         latlng = new google.maps.LatLng(lat, lng);
//
//                     $("#input-location").val(results[0].formatted_address);
//                     var latitudeInput = $('#latitude');
//                     var longitudeInput = $("#longitude");
//                     if( latitudeInput.length ){
//                         latitudeInput.val( marker.getPosition().lat() );
//                     }
//                     if( longitudeInput.length ){
//                         longitudeInput.val( marker.getPosition().lng() );
//                     }
//                 }
//             });
//
//         }
//     }
//
// }

/*
if( $("#input-location2").length ){
	if( !map ){
		var map = new google.maps.Map(document.getElementById("input-location2"));
	}
	var mapCenter;
	var input = document.getElementById('input-location2');
	var autocomplete = new google.maps.places.Autocomplete(input);
	autocomplete.bindTo('bounds', map);
	google.maps.event.addListener(autocomplete, 'place_changed', function() {
		var place = autocomplete.getPlace();
		if (!place.geometry) {
			return;
		}
	});       
}
*/

function previewImage(input) {
  var ext = $(input).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg']) === -1) {
    alert('invalid extension!');
  } else {
    if (input.files && input.files[0]) {
      var reader = new FileReader();
      reader.onload = function (e) {
        $(input).parents(".profile-image").find(".image").attr("style", "background-image: url('" + e.target.result + "');");
      };
      reader.readAsDataURL(input.files[0]);
    }
  }
}

// Viewport ------------------------------------------------------------------------------------------------------------

var viewport = function () {
  var viewPorts = ['xs', 'sm', 'md', 'lg'];
  var viewPortSize = function viewPortSize() {
    return window.getComputedStyle(document.body, ':before').content.replace(/"/g, '');
  };
  var is = function is(size) {
    if (viewPorts.indexOf(size) === -1) throw "no valid viewport name given";
    return viewPortSize() === size;
  };
  var isEqualOrGreaterThan = function isEqualOrGreaterThan(size) {
    if (viewPorts.indexOf(size) === -1) throw "no valid viewport name given";
    return viewPorts.indexOf(viewPortSize()) >= viewPorts.indexOf(size);
  };

  // Public API
  return {
    is: is,
    isEqualOrGreaterThan: isEqualOrGreaterThan
  };
}();
$(document).ready(function () {
  $(":input").inputmask();
});

/***/ }),

/***/ "./assets/js/jquery.inputmask.bundle.js":
/*!**********************************************!*\
  !*** ./assets/js/jquery.inputmask.bundle.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
__webpack_require__(/*! core-js/modules/es.string.repeat.js */ "./node_modules/core-js/modules/es.string.repeat.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.array.reverse.js */ "./node_modules/core-js/modules/es.array.reverse.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/es.error.to-string.js */ "./node_modules/core-js/modules/es.error.to-string.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
__webpack_require__(/*! core-js/modules/es.regexp.dot-all.js */ "./node_modules/core-js/modules/es.regexp.dot-all.js");
__webpack_require__(/*! core-js/modules/es.regexp.sticky.js */ "./node_modules/core-js/modules/es.regexp.sticky.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
__webpack_require__(/*! core-js/modules/es.object.lookup-getter.js */ "./node_modules/core-js/modules/es.object.lookup-getter.js");
__webpack_require__(/*! core-js/modules/es.object.lookup-setter.js */ "./node_modules/core-js/modules/es.object.lookup-setter.js");
__webpack_require__(/*! core-js/modules/es.object.define-getter.js */ "./node_modules/core-js/modules/es.object.define-getter.js");
__webpack_require__(/*! core-js/modules/es.object.define-setter.js */ "./node_modules/core-js/modules/es.object.define-setter.js");
__webpack_require__(/*! core-js/modules/es.string.substr.js */ "./node_modules/core-js/modules/es.string.substr.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/es.array.unshift.js */ "./node_modules/core-js/modules/es.array.unshift.js");
__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/*!
* jquery.inputmask.bundle.js
* https://github.com/RobinHerbots/jquery.inputmask
* Copyright (c) 2010 - 2016 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 3.3.4
*/
!function ($) {
  function Inputmask(alias, options) {
    return this instanceof Inputmask ? ($.isPlainObject(alias) ? options = alias : (options = options || {}, options.alias = alias), this.el = void 0, this.opts = $.extend(!0, {}, this.defaults, options), this.maskset = void 0, this.noMasksCache = options && void 0 !== options.definitions, this.userOptions = options || {}, this.events = {}, this.dataAttribute = "data-inputmask", this.isRTL = this.opts.numericInput, void resolveAlias(this.opts.alias, options, this.opts)) : new Inputmask(alias, options);
  }
  function resolveAlias(aliasStr, options, opts) {
    var aliasDefinition = opts.aliases[aliasStr];
    return aliasDefinition ? (aliasDefinition.alias && resolveAlias(aliasDefinition.alias, void 0, opts), $.extend(!0, opts, aliasDefinition), $.extend(!0, opts, options), !0) : (null === opts.mask && (opts.mask = aliasStr), !1);
  }
  function generateMaskSet(opts, nocache) {
    function generateMask(mask, metadata, opts) {
      if (null !== mask && "" !== mask) {
        if (1 === mask.length && opts.greedy === !1 && 0 !== opts.repeat && (opts.placeholder = ""), opts.repeat > 0 || "*" === opts.repeat || "+" === opts.repeat) {
          var repeatStart = "*" === opts.repeat ? 0 : "+" === opts.repeat ? 1 : opts.repeat;
          mask = opts.groupmarker.start + mask + opts.groupmarker.end + opts.quantifiermarker.start + repeatStart + "," + opts.repeat + opts.quantifiermarker.end;
        }
        var masksetDefinition;
        return void 0 === Inputmask.prototype.masksCache[mask] || nocache === !0 ? (masksetDefinition = {
          mask: mask,
          maskToken: Inputmask.prototype.analyseMask(mask, opts),
          validPositions: {},
          _buffer: void 0,
          buffer: void 0,
          tests: {},
          metadata: metadata,
          maskLength: void 0
        }, nocache !== !0 && (Inputmask.prototype.masksCache[opts.numericInput ? mask.split("").reverse().join("") : mask] = masksetDefinition, masksetDefinition = $.extend(!0, {}, Inputmask.prototype.masksCache[opts.numericInput ? mask.split("").reverse().join("") : mask]))) : masksetDefinition = $.extend(!0, {}, Inputmask.prototype.masksCache[opts.numericInput ? mask.split("").reverse().join("") : mask]), masksetDefinition;
      }
    }
    var ms;
    if ($.isFunction(opts.mask) && (opts.mask = opts.mask(opts)), $.isArray(opts.mask)) {
      if (opts.mask.length > 1) {
        opts.keepStatic = null === opts.keepStatic || opts.keepStatic;
        var altMask = opts.groupmarker.start;
        return $.each(opts.numericInput ? opts.mask.reverse() : opts.mask, function (ndx, msk) {
          altMask.length > 1 && (altMask += opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start), altMask += void 0 === msk.mask || $.isFunction(msk.mask) ? msk : msk.mask;
        }), altMask += opts.groupmarker.end, generateMask(altMask, opts.mask, opts);
      }
      opts.mask = opts.mask.pop();
    }
    return opts.mask && (ms = void 0 === opts.mask.mask || $.isFunction(opts.mask.mask) ? generateMask(opts.mask, opts.mask, opts) : generateMask(opts.mask.mask, opts.mask, opts)), ms;
  }
  function maskScope(actionObj, maskset, opts) {
    function getMaskTemplate(baseOnInput, minimalPos, includeMode) {
      minimalPos = minimalPos || 0;
      var ndxIntlzr,
        test,
        testPos,
        maskTemplate = [],
        pos = 0,
        lvp = getLastValidPosition();
      maxLength = void 0 !== el ? el.maxLength : void 0, maxLength === -1 && (maxLength = void 0);
      do {
        baseOnInput === !0 && getMaskSet().validPositions[pos] ? (testPos = getMaskSet().validPositions[pos], test = testPos.match, ndxIntlzr = testPos.locator.slice(), maskTemplate.push(includeMode === !0 ? testPos.input : includeMode === !1 ? test.nativeDef : getPlaceholder(pos, test))) : (testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), test = testPos.match, ndxIntlzr = testPos.locator.slice(), (opts.jitMasking === !1 || pos < lvp || "number" == typeof opts.jitMasking && isFinite(opts.jitMasking) && opts.jitMasking > pos) && maskTemplate.push(includeMode === !1 ? test.nativeDef : getPlaceholder(pos, test))), pos++;
      } while ((void 0 === maxLength || pos < maxLength) && (null !== test.fn || "" !== test.def) || minimalPos > pos);
      return "" === maskTemplate[maskTemplate.length - 1] && maskTemplate.pop(), getMaskSet().maskLength = pos + 1, maskTemplate;
    }
    function getMaskSet() {
      return maskset;
    }
    function resetMaskSet(soft) {
      var maskset = getMaskSet();
      maskset.buffer = void 0, soft !== !0 && (maskset._buffer = void 0, maskset.validPositions = {}, maskset.p = 0);
    }
    function getLastValidPosition(closestTo, strict, validPositions) {
      var before = -1,
        after = -1,
        valids = validPositions || getMaskSet().validPositions;
      void 0 === closestTo && (closestTo = -1);
      for (var posNdx in valids) {
        var psNdx = parseInt(posNdx);
        valids[psNdx] && (strict || null !== valids[psNdx].match.fn) && (psNdx <= closestTo && (before = psNdx), psNdx >= closestTo && (after = psNdx));
      }
      return before !== -1 && closestTo - before > 1 || after < closestTo ? before : after;
    }
    function stripValidPositions(start, end, nocheck, strict) {
      function IsEnclosedStatic(pos) {
        var posMatch = getMaskSet().validPositions[pos];
        if (void 0 !== posMatch && null === posMatch.match.fn) {
          var prevMatch = getMaskSet().validPositions[pos - 1],
            nextMatch = getMaskSet().validPositions[pos + 1];
          return void 0 !== prevMatch && void 0 !== nextMatch;
        }
        return !1;
      }
      var i,
        startPos = start,
        positionsClone = $.extend(!0, {}, getMaskSet().validPositions),
        needsValidation = !1;
      for (getMaskSet().p = start, i = end - 1; i >= startPos; i--) {
        void 0 !== getMaskSet().validPositions[i] && (nocheck !== !0 && (!getMaskSet().validPositions[i].match.optionality && IsEnclosedStatic(i) || opts.canClearPosition(getMaskSet(), i, getLastValidPosition(), strict, opts) === !1) || delete getMaskSet().validPositions[i]);
      }
      for (resetMaskSet(!0), i = startPos + 1; i <= getLastValidPosition();) {
        for (; void 0 !== getMaskSet().validPositions[startPos];) {
          startPos++;
        }
        if (i < startPos && (i = startPos + 1), void 0 === getMaskSet().validPositions[i] && isMask(i)) i++;else {
          var t = getTestTemplate(i);
          needsValidation === !1 && positionsClone[startPos] && positionsClone[startPos].match.def === t.match.def ? (getMaskSet().validPositions[startPos] = $.extend(!0, {}, positionsClone[startPos]), getMaskSet().validPositions[startPos].input = t.input, delete getMaskSet().validPositions[i], i++) : positionCanMatchDefinition(startPos, t.match.def) ? isValid(startPos, t.input || getPlaceholder(i), !0) !== !1 && (delete getMaskSet().validPositions[i], i++, needsValidation = !0) : isMask(i) || (i++, startPos--), startPos++;
        }
      }
      resetMaskSet(!0);
    }
    function determineTestTemplate(tests, guessNextBest) {
      for (var testPos, testPositions = tests, lvp = getLastValidPosition(), lvTest = getMaskSet().validPositions[lvp] || getTests(0)[0], lvTestAltArr = void 0 !== lvTest.alternation ? lvTest.locator[lvTest.alternation].toString().split(",") : [], ndx = 0; ndx < testPositions.length && (testPos = testPositions[ndx], !(testPos.match && (opts.greedy && testPos.match.optionalQuantifier !== !0 || (testPos.match.optionality === !1 || testPos.match.newBlockMarker === !1) && testPos.match.optionalQuantifier !== !0) && (void 0 === lvTest.alternation || lvTest.alternation !== testPos.alternation || void 0 !== testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAltArr))) || guessNextBest === !0 && (null !== testPos.match.fn || /[0-9a-bA-Z]/.test(testPos.match.def))); ndx++) {
        ;
      }
      return testPos;
    }
    function getTestTemplate(pos, ndxIntlzr, tstPs) {
      return getMaskSet().validPositions[pos] || determineTestTemplate(getTests(pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));
    }
    function getTest(pos) {
      return getMaskSet().validPositions[pos] ? getMaskSet().validPositions[pos] : getTests(pos)[0];
    }
    function positionCanMatchDefinition(pos, def) {
      for (var valid = !1, tests = getTests(pos), tndx = 0; tndx < tests.length; tndx++) {
        if (tests[tndx].match && tests[tndx].match.def === def) {
          valid = !0;
          break;
        }
      }
      return valid;
    }
    function getTests(pos, ndxIntlzr, tstPs) {
      function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
        function handleMatch(match, loopNdx, quantifierRecurse) {
          function isFirstMatch(latestMatch, tokenGroup) {
            var firstMatch = 0 === $.inArray(latestMatch, tokenGroup.matches);
            return firstMatch || $.each(tokenGroup.matches, function (ndx, match) {
              if (match.isQuantifier === !0 && (firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]))) return !1;
            }), firstMatch;
          }
          function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {
            var bestMatch, indexPos;
            return (getMaskSet().tests[pos] || getMaskSet().validPositions[pos]) && $.each(getMaskSet().tests[pos] || [getMaskSet().validPositions[pos]], function (ndx, lmnt) {
              var alternation = void 0 !== targetAlternation ? targetAlternation : lmnt.alternation,
                ndxPos = void 0 !== lmnt.locator[alternation] ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;
              (void 0 === indexPos || ndxPos < indexPos) && ndxPos !== -1 && (bestMatch = lmnt, indexPos = ndxPos);
            }), bestMatch ? bestMatch.locator.slice((void 0 !== targetAlternation ? targetAlternation : bestMatch.alternation) + 1) : void 0 !== targetAlternation ? resolveNdxInitializer(pos, alternateNdx) : void 0;
          }
          function staticCanMatchDefinition(source, target) {
            return null === source.match.fn && null !== target.match.fn && target.match.fn.test(source.match.def, getMaskSet(), pos, !1, opts, !1);
          }
          if (testPos > 1e4) throw "Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + getMaskSet().mask;
          if (testPos === pos && void 0 === match.matches) return matches.push({
            match: match,
            locator: loopNdx.reverse(),
            cd: cacheDependency
          }), !0;
          if (void 0 !== match.matches) {
            if (match.isGroup && quantifierRecurse !== match) {
              if (match = handleMatch(maskToken.matches[$.inArray(match, maskToken.matches) + 1], loopNdx)) return !0;
            } else if (match.isOptional) {
              var optionalToken = match;
              if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) {
                if (latestMatch = matches[matches.length - 1].match, !isFirstMatch(latestMatch, optionalToken)) return !0;
                insertStop = !0, testPos = pos;
              }
            } else if (match.isAlternator) {
              var maltMatches,
                alternateToken = match,
                malternateMatches = [],
                currentMatches = matches.slice(),
                loopNdxCnt = loopNdx.length,
                altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;
              if (altIndex === -1 || "string" == typeof altIndex) {
                var amndx,
                  currentPos = testPos,
                  ndxInitializerClone = ndxInitializer.slice(),
                  altIndexArr = [];
                if ("string" == typeof altIndex) altIndexArr = altIndex.split(",");else for (amndx = 0; amndx < alternateToken.matches.length; amndx++) {
                  altIndexArr.push(amndx);
                }
                for (var ndx = 0; ndx < altIndexArr.length; ndx++) {
                  if (amndx = parseInt(altIndexArr[ndx]), matches = [], ndxInitializer = resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice(), match = handleMatch(alternateToken.matches[amndx] || maskToken.matches[amndx], [amndx].concat(loopNdx), quantifierRecurse) || match, match !== !0 && void 0 !== match && altIndexArr[altIndexArr.length - 1] < alternateToken.matches.length) {
                    var ntndx = $.inArray(match, maskToken.matches) + 1;
                    maskToken.matches.length > ntndx && (match = handleMatch(maskToken.matches[ntndx], [ntndx].concat(loopNdx.slice(1, loopNdx.length)), quantifierRecurse), match && (altIndexArr.push(ntndx.toString()), $.each(matches, function (ndx, lmnt) {
                      lmnt.alternation = loopNdx.length - 1;
                    })));
                  }
                  maltMatches = matches.slice(), testPos = currentPos, matches = [];
                  for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
                    var altMatch = maltMatches[ndx1],
                      hasMatch = !1;
                    altMatch.alternation = altMatch.alternation || loopNdxCnt;
                    for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
                      var altMatch2 = malternateMatches[ndx2];
                      if (("string" != typeof altIndex || $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr) !== -1) && (altMatch.match.def === altMatch2.match.def || staticCanMatchDefinition(altMatch, altMatch2))) {
                        hasMatch = altMatch.match.nativeDef === altMatch2.match.nativeDef, altMatch.alternation == altMatch2.alternation && altMatch2.locator[altMatch2.alternation].toString().indexOf(altMatch.locator[altMatch.alternation]) === -1 && (altMatch2.locator[altMatch2.alternation] = altMatch2.locator[altMatch2.alternation] + "," + altMatch.locator[altMatch.alternation], altMatch2.alternation = altMatch.alternation, null == altMatch.match.fn && (altMatch2.na = altMatch2.na || altMatch.locator[altMatch.alternation].toString(), altMatch2.na.indexOf(altMatch.locator[altMatch.alternation]) === -1 && (altMatch2.na = altMatch2.na + "," + altMatch.locator[altMatch.alternation])));
                        break;
                      }
                    }
                    hasMatch || malternateMatches.push(altMatch);
                  }
                }
                "string" == typeof altIndex && (malternateMatches = $.map(malternateMatches, function (lmnt, ndx) {
                  if (isFinite(ndx)) {
                    var mamatch,
                      alternation = lmnt.alternation,
                      altLocArr = lmnt.locator[alternation].toString().split(",");
                    lmnt.locator[alternation] = void 0, lmnt.alternation = void 0;
                    for (var alndx = 0; alndx < altLocArr.length; alndx++) {
                      mamatch = $.inArray(altLocArr[alndx], altIndexArr) !== -1, mamatch && (void 0 !== lmnt.locator[alternation] ? (lmnt.locator[alternation] += ",", lmnt.locator[alternation] += altLocArr[alndx]) : lmnt.locator[alternation] = parseInt(altLocArr[alndx]), lmnt.alternation = alternation);
                    }
                    if (void 0 !== lmnt.locator[alternation]) return lmnt;
                  }
                })), matches = currentMatches.concat(malternateMatches), testPos = pos, insertStop = matches.length > 0, ndxInitializer = ndxInitializerClone.slice();
              } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [altIndex].concat(loopNdx), quantifierRecurse);
              if (match) return !0;
            } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[$.inArray(match, maskToken.matches) - 1]) for (var qt = match, qndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {
              var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];
              if (match = handleMatch(tokenGroup, [qndx].concat(loopNdx), tokenGroup)) {
                if (latestMatch = matches[matches.length - 1].match, latestMatch.optionalQuantifier = qndx > qt.quantifier.min - 1, isFirstMatch(latestMatch, tokenGroup)) {
                  if (qndx > qt.quantifier.min - 1) {
                    insertStop = !0, testPos = pos;
                    break;
                  }
                  return !0;
                }
                return !0;
              }
            } else if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) return !0;
          } else testPos++;
        }
        for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) {
          if (maskToken.matches[tndx].isQuantifier !== !0) {
            var match = handleMatch(maskToken.matches[tndx], [tndx].concat(loopNdx), quantifierRecurse);
            if (match && testPos === pos) return match;
            if (testPos > pos) break;
          }
        }
      }
      function mergeLocators(tests) {
        var locator = [];
        return $.isArray(tests) || (tests = [tests]), tests.length > 0 && (void 0 === tests[0].alternation ? (locator = determineTestTemplate(tests.slice()).locator.slice(), 0 === locator.length && (locator = tests[0].locator.slice())) : $.each(tests, function (ndx, tst) {
          if ("" !== tst.def) if (0 === locator.length) locator = tst.locator.slice();else for (var i = 0; i < locator.length; i++) {
            tst.locator[i] && locator[i].toString().indexOf(tst.locator[i]) === -1 && (locator[i] += "," + tst.locator[i]);
          }
        })), locator;
      }
      function filterTests(tests) {
        return opts.keepStatic && pos > 0 && tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0) && tests[0].match.optionality !== !0 && tests[0].match.optionalQuantifier !== !0 && null === tests[0].match.fn && !/[0-9a-bA-Z]/.test(tests[0].match.def) ? [determineTestTemplate(tests)] : tests;
      }
      var latestMatch,
        maskTokens = getMaskSet().maskToken,
        testPos = ndxIntlzr ? tstPs : 0,
        ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [0],
        matches = [],
        insertStop = !1,
        cacheDependency = ndxIntlzr ? ndxIntlzr.join("") : "";
      if (pos > -1) {
        if (void 0 === ndxIntlzr) {
          for (var test, previousPos = pos - 1; void 0 === (test = getMaskSet().validPositions[previousPos] || getMaskSet().tests[previousPos]) && previousPos > -1;) {
            previousPos--;
          }
          void 0 !== test && previousPos > -1 && (ndxInitializer = mergeLocators(test), cacheDependency = ndxInitializer.join(""), testPos = previousPos);
        }
        if (getMaskSet().tests[pos] && getMaskSet().tests[pos][0].cd === cacheDependency) return filterTests(getMaskSet().tests[pos]);
        for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
          var match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [mtndx]);
          if (match && testPos === pos || testPos > pos) break;
        }
      }
      return (0 === matches.length || insertStop) && matches.push({
        match: {
          fn: null,
          cardinality: 0,
          optionality: !0,
          casing: null,
          def: "",
          placeholder: ""
        },
        locator: [],
        cd: cacheDependency
      }), void 0 !== ndxIntlzr && getMaskSet().tests[pos] ? filterTests($.extend(!0, [], matches)) : (getMaskSet().tests[pos] = $.extend(!0, [], matches), filterTests(getMaskSet().tests[pos]));
    }
    function getBufferTemplate() {
      return void 0 === getMaskSet()._buffer && (getMaskSet()._buffer = getMaskTemplate(!1, 1), void 0 === getMaskSet().buffer && getMaskSet()._buffer.slice()), getMaskSet()._buffer;
    }
    function getBuffer(noCache) {
      return void 0 !== getMaskSet().buffer && noCache !== !0 || (getMaskSet().buffer = getMaskTemplate(!0, getLastValidPosition(), !0)), getMaskSet().buffer;
    }
    function refreshFromBuffer(start, end, buffer) {
      var i;
      if (start === !0) resetMaskSet(), start = 0, end = buffer.length;else for (i = start; i < end; i++) {
        delete getMaskSet().validPositions[i];
      }
      for (i = start; i < end; i++) {
        resetMaskSet(!0), buffer[i] !== opts.skipOptionalPartCharacter && isValid(i, buffer[i], !0, !0);
      }
    }
    function casing(elem, test, pos) {
      switch (opts.casing || test.casing) {
        case "upper":
          elem = elem.toUpperCase();
          break;
        case "lower":
          elem = elem.toLowerCase();
          break;
        case "title":
          var posBefore = getMaskSet().validPositions[pos - 1];
          elem = 0 === pos || posBefore && posBefore.input === String.fromCharCode(Inputmask.keyCode.SPACE) ? elem.toUpperCase() : elem.toLowerCase();
      }
      return elem;
    }
    function checkAlternationMatch(altArr1, altArr2) {
      for (var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = !1, alndx = 0; alndx < altArr1.length; alndx++) {
        if ($.inArray(altArr1[alndx], altArrC) !== -1) {
          isMatch = !0;
          break;
        }
      }
      return isMatch;
    }
    function isValid(pos, c, strict, fromSetValid, fromAlternate) {
      function isSelection(posObj) {
        var selection = isRTL ? posObj.begin - posObj.end > 1 || posObj.begin - posObj.end === 1 && opts.insertMode : posObj.end - posObj.begin > 1 || posObj.end - posObj.begin === 1 && opts.insertMode;
        return selection && 0 === posObj.begin && posObj.end === getMaskSet().maskLength ? "full" : selection;
      }
      function _isValid(position, c, strict) {
        var rslt = !1;
        return $.each(getTests(position), function (ndx, tst) {
          for (var test = tst.match, loopend = c ? 1 : 0, chrs = "", i = test.cardinality; i > loopend; i--) {
            chrs += getBufferElement(position - (i - 1));
          }
          if (c && (chrs += c), getBuffer(!0), rslt = null != test.fn ? test.fn.test(chrs, getMaskSet(), position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && "" !== test.def && {
            c: test.placeholder || test.def,
            pos: position
          }, rslt !== !1) {
            var elem = void 0 !== rslt.c ? rslt.c : c;
            elem = elem === opts.skipOptionalPartCharacter && null === test.fn ? test.placeholder || test.def : elem;
            var validatedPos = position,
              possibleModifiedBuffer = getBuffer();
            if (void 0 !== rslt.remove && ($.isArray(rslt.remove) || (rslt.remove = [rslt.remove]), $.each(rslt.remove.sort(function (a, b) {
              return b - a;
            }), function (ndx, lmnt) {
              stripValidPositions(lmnt, lmnt + 1, !0);
            })), void 0 !== rslt.insert && ($.isArray(rslt.insert) || (rslt.insert = [rslt.insert]), $.each(rslt.insert.sort(function (a, b) {
              return a - b;
            }), function (ndx, lmnt) {
              isValid(lmnt.pos, lmnt.c, !0, fromSetValid);
            })), rslt.refreshFromBuffer) {
              var refresh = rslt.refreshFromBuffer;
              if (strict = !0, refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end, possibleModifiedBuffer), void 0 === rslt.pos && void 0 === rslt.c) return rslt.pos = getLastValidPosition(), !1;
              if (validatedPos = void 0 !== rslt.pos ? rslt.pos : position, validatedPos !== position) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0, fromSetValid)), !1;
            } else if (rslt !== !0 && void 0 !== rslt.pos && rslt.pos !== position && (validatedPos = rslt.pos, refreshFromBuffer(position, validatedPos, getBuffer().slice()), validatedPos !== position)) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0)), !1;
            return (rslt === !0 || void 0 !== rslt.pos || void 0 !== rslt.c) && (ndx > 0 && resetMaskSet(!0), setValidPosition(validatedPos, $.extend({}, tst, {
              input: casing(elem, test, validatedPos)
            }), fromSetValid, isSelection(pos)) || (rslt = !1), !1);
          }
        }), rslt;
      }
      function alternate(pos, c, strict) {
        var lastAlt,
          alternation,
          altPos,
          prevAltPos,
          i,
          validPos,
          altNdxs,
          decisionPos,
          validPsClone = $.extend(!0, {}, getMaskSet().validPositions),
          isValidRslt = !1,
          lAltPos = getLastValidPosition();
        for (prevAltPos = getMaskSet().validPositions[lAltPos]; lAltPos >= 0; lAltPos--) {
          if (altPos = getMaskSet().validPositions[lAltPos], altPos && void 0 !== altPos.alternation) {
            if (lastAlt = lAltPos, alternation = getMaskSet().validPositions[lastAlt].alternation, prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) break;
            prevAltPos = altPos;
          }
        }
        if (void 0 !== alternation) {
          decisionPos = parseInt(lastAlt);
          var decisionTaker = void 0 !== prevAltPos.locator[prevAltPos.alternation || alternation] ? prevAltPos.locator[prevAltPos.alternation || alternation] : altNdxs[0];
          decisionTaker.length > 0 && (decisionTaker = decisionTaker.split(",")[0]);
          var possibilityPos = getMaskSet().validPositions[decisionPos],
            prevPos = getMaskSet().validPositions[decisionPos - 1];
          $.each(getTests(decisionPos, prevPos ? prevPos.locator : void 0, decisionPos - 1), function (ndx, test) {
            altNdxs = test.locator[alternation] ? test.locator[alternation].toString().split(",") : [];
            for (var mndx = 0; mndx < altNdxs.length; mndx++) {
              var validInputs = [],
                staticInputsBeforePos = 0,
                staticInputsBeforePosAlternate = 0,
                verifyValidInput = !1;
              if (decisionTaker < altNdxs[mndx] && (void 0 === test.na || $.inArray(altNdxs[mndx], test.na.split(",")) === -1)) {
                getMaskSet().validPositions[decisionPos] = $.extend(!0, {}, test);
                var possibilities = getMaskSet().validPositions[decisionPos].locator;
                for (getMaskSet().validPositions[decisionPos].locator[alternation] = parseInt(altNdxs[mndx]), null == test.match.fn ? (possibilityPos.input !== test.match.def && (verifyValidInput = !0, possibilityPos.generatedInput !== !0 && validInputs.push(possibilityPos.input)), staticInputsBeforePosAlternate++, getMaskSet().validPositions[decisionPos].generatedInput = !/[0-9a-bA-Z]/.test(test.match.def), getMaskSet().validPositions[decisionPos].input = test.match.def) : getMaskSet().validPositions[decisionPos].input = possibilityPos.input, i = decisionPos + 1; i < getLastValidPosition(void 0, !0) + 1; i++) {
                  validPos = getMaskSet().validPositions[i], validPos && validPos.generatedInput !== !0 && /[0-9a-bA-Z]/.test(validPos.input) ? validInputs.push(validPos.input) : i < pos && staticInputsBeforePos++, delete getMaskSet().validPositions[i];
                }
                for (verifyValidInput && validInputs[0] === test.match.def && validInputs.shift(), resetMaskSet(!0), isValidRslt = !0; validInputs.length > 0;) {
                  var input = validInputs.shift();
                  if (input !== opts.skipOptionalPartCharacter && !(isValidRslt = isValid(getLastValidPosition(void 0, !0) + 1, input, !1, fromSetValid, !0))) break;
                }
                if (isValidRslt) {
                  getMaskSet().validPositions[decisionPos].locator = possibilities;
                  var targetLvp = getLastValidPosition(pos) + 1;
                  for (i = decisionPos + 1; i < getLastValidPosition() + 1; i++) {
                    validPos = getMaskSet().validPositions[i], (void 0 === validPos || null == validPos.match.fn) && i < pos + (staticInputsBeforePosAlternate - staticInputsBeforePos) && staticInputsBeforePosAlternate++;
                  }
                  pos += staticInputsBeforePosAlternate - staticInputsBeforePos, isValidRslt = isValid(pos > targetLvp ? targetLvp : pos, c, strict, fromSetValid, !0);
                }
                if (isValidRslt) return !1;
                resetMaskSet(), getMaskSet().validPositions = $.extend(!0, {}, validPsClone);
              }
            }
          });
        }
        return isValidRslt;
      }
      function trackbackAlternations(originalPos, newPos) {
        var vp = getMaskSet().validPositions[newPos];
        if (vp) for (var targetLocator = vp.locator, tll = targetLocator.length, ps = originalPos; ps < newPos; ps++) {
          if (void 0 === getMaskSet().validPositions[ps] && !isMask(ps, !0)) {
            var tests = getTests(ps),
              bestMatch = tests[0],
              equality = -1;
            $.each(tests, function (ndx, tst) {
              for (var i = 0; i < tll && void 0 !== tst.locator[i] && checkAlternationMatch(tst.locator[i].toString().split(","), targetLocator[i].toString().split(",")); i++) {
                equality < i && (equality = i, bestMatch = tst);
              }
            }), setValidPosition(ps, $.extend({}, bestMatch, {
              input: bestMatch.match.placeholder || bestMatch.match.def
            }), !0);
          }
        }
      }
      function setValidPosition(pos, validTest, fromSetValid, isSelection) {
        if (isSelection || opts.insertMode && void 0 !== getMaskSet().validPositions[pos] && void 0 === fromSetValid) {
          var i,
            positionsClone = $.extend(!0, {}, getMaskSet().validPositions),
            lvp = getLastValidPosition(void 0, !0);
          for (i = pos; i <= lvp; i++) {
            delete getMaskSet().validPositions[i];
          }
          getMaskSet().validPositions[pos] = $.extend(!0, {}, validTest);
          var j,
            valid = !0,
            vps = getMaskSet().validPositions,
            needsValidation = !1,
            initialLength = getMaskSet().maskLength;
          for (i = j = pos; i <= lvp; i++) {
            var t = positionsClone[i];
            if (void 0 !== t) for (var posMatch = j; posMatch < getMaskSet().maskLength && (null === t.match.fn && vps[i] && (vps[i].match.optionalQuantifier === !0 || vps[i].match.optionality === !0) || null != t.match.fn);) {
              if (posMatch++, needsValidation === !1 && positionsClone[posMatch] && positionsClone[posMatch].match.def === t.match.def) getMaskSet().validPositions[posMatch] = $.extend(!0, {}, positionsClone[posMatch]), getMaskSet().validPositions[posMatch].input = t.input, fillMissingNonMask(posMatch), j = posMatch, valid = !0;else if (positionCanMatchDefinition(posMatch, t.match.def)) {
                var result = isValid(posMatch, t.input, !0, !0);
                valid = result !== !1, j = result.caret || result.insert ? getLastValidPosition() : posMatch, needsValidation = !0;
              } else valid = t.generatedInput === !0;
              if (getMaskSet().maskLength < initialLength && (getMaskSet().maskLength = initialLength), valid) break;
            }
            if (!valid) break;
          }
          if (!valid) return getMaskSet().validPositions = $.extend(!0, {}, positionsClone), resetMaskSet(!0), !1;
        } else getMaskSet().validPositions[pos] = $.extend(!0, {}, validTest);
        return resetMaskSet(!0), !0;
      }
      function fillMissingNonMask(maskPos) {
        for (var pndx = maskPos - 1; pndx > -1 && !getMaskSet().validPositions[pndx]; pndx--) {
          ;
        }
        var testTemplate, testsFromPos;
        for (pndx++; pndx < maskPos; pndx++) {
          void 0 === getMaskSet().validPositions[pndx] && (opts.jitMasking === !1 || opts.jitMasking > pndx) && (testsFromPos = getTests(pndx, getTestTemplate(pndx - 1).locator, pndx - 1).slice(), "" === testsFromPos[testsFromPos.length - 1].match.def && testsFromPos.pop(), testTemplate = determineTestTemplate(testsFromPos), testTemplate && (testTemplate.match.def === opts.radixPointDefinitionSymbol || !isMask(pndx, !0) || $.inArray(opts.radixPoint, getBuffer()) < pndx && testTemplate.match.fn && testTemplate.match.fn.test(getPlaceholder(pndx), getMaskSet(), pndx, !1, opts)) && (result = _isValid(pndx, testTemplate.match.placeholder || (null == testTemplate.match.fn ? testTemplate.match.def : "" !== getPlaceholder(pndx) ? getPlaceholder(pndx) : getBuffer()[pndx]), !0), result !== !1 && (getMaskSet().validPositions[result.pos || pndx].generatedInput = !0)));
        }
      }
      strict = strict === !0;
      var maskPos = pos;
      void 0 !== pos.begin && (maskPos = isRTL && !isSelection(pos) ? pos.end : pos.begin);
      var result = !1,
        positionsClone = $.extend(!0, {}, getMaskSet().validPositions);
      if (fillMissingNonMask(maskPos), isSelection(pos) && (handleRemove(void 0, Inputmask.keyCode.DELETE, pos), maskPos = getMaskSet().p), maskPos < getMaskSet().maskLength && (result = _isValid(maskPos, c, strict), (!strict || fromSetValid === !0) && result === !1)) {
        var currentPosValid = getMaskSet().validPositions[maskPos];
        if (!currentPosValid || null !== currentPosValid.match.fn || currentPosValid.match.def !== c && c !== opts.skipOptionalPartCharacter) {
          if ((opts.insertMode || void 0 === getMaskSet().validPositions[seekNext(maskPos)]) && !isMask(maskPos, !0)) {
            var testsFromPos = getTests(maskPos).slice();
            "" === testsFromPos[testsFromPos.length - 1].match.def && testsFromPos.pop();
            var staticChar = determineTestTemplate(testsFromPos, !0);
            staticChar && null === staticChar.match.fn && (staticChar = staticChar.match.placeholder || staticChar.match.def, _isValid(maskPos, staticChar, strict), getMaskSet().validPositions[maskPos].generatedInput = !0);
            for (var nPos = maskPos + 1, snPos = seekNext(maskPos); nPos <= snPos; nPos++) {
              if (result = _isValid(nPos, c, strict), result !== !1) {
                trackbackAlternations(maskPos, void 0 !== result.pos ? result.pos : nPos), maskPos = nPos;
                break;
              }
            }
          }
        } else result = {
          caret: seekNext(maskPos)
        };
      }
      return result === !1 && opts.keepStatic && !strict && fromAlternate !== !0 && (result = alternate(maskPos, c, strict)), result === !0 && (result = {
        pos: maskPos
      }), $.isFunction(opts.postValidation) && result !== !1 && !strict && fromSetValid !== !0 && (result = !!opts.postValidation(getBuffer(!0), result, opts) && result), void 0 === result.pos && (result.pos = maskPos), result === !1 && (resetMaskSet(!0), getMaskSet().validPositions = $.extend(!0, {}, positionsClone)), result;
    }
    function isMask(pos, strict) {
      var test;
      if (strict ? (test = getTestTemplate(pos).match, "" === test.def && (test = getTest(pos).match)) : test = getTest(pos).match, null != test.fn) return test.fn;
      if (strict !== !0 && pos > -1) {
        var tests = getTests(pos);
        return tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0);
      }
      return !1;
    }
    function seekNext(pos, newBlock) {
      var maskL = getMaskSet().maskLength;
      if (pos >= maskL) return maskL;
      for (var position = pos; ++position < maskL && (newBlock === !0 && (getTest(position).match.newBlockMarker !== !0 || !isMask(position)) || newBlock !== !0 && !isMask(position));) {
        ;
      }
      return position;
    }
    function seekPrevious(pos, newBlock) {
      var tests,
        position = pos;
      if (position <= 0) return 0;
      for (; --position > 0 && (newBlock === !0 && getTest(position).match.newBlockMarker !== !0 || newBlock !== !0 && !isMask(position) && (tests = getTests(position), tests.length < 2 || 2 === tests.length && "" === tests[1].match.def));) {
        ;
      }
      return position;
    }
    function getBufferElement(position) {
      return void 0 === getMaskSet().validPositions[position] ? getPlaceholder(position) : getMaskSet().validPositions[position].input;
    }
    function writeBuffer(input, buffer, caretPos, event, triggerInputEvent) {
      if (event && $.isFunction(opts.onBeforeWrite)) {
        var result = opts.onBeforeWrite(event, buffer, caretPos, opts);
        if (result) {
          if (result.refreshFromBuffer) {
            var refresh = result.refreshFromBuffer;
            refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end, result.buffer || buffer), buffer = getBuffer(!0);
          }
          void 0 !== caretPos && (caretPos = void 0 !== result.caret ? result.caret : caretPos);
        }
      }
      input.inputmask._valueSet(buffer.join("")), void 0 === caretPos || void 0 !== event && "blur" === event.type ? renderColorMask(input, buffer, caretPos) : caret(input, caretPos), triggerInputEvent === !0 && (skipInputEvent = !0, $(input).trigger("input"));
    }
    function getPlaceholder(pos, test) {
      if (test = test || getTest(pos).match, void 0 !== test.placeholder) return test.placeholder;
      if (null === test.fn) {
        if (pos > -1 && void 0 === getMaskSet().validPositions[pos]) {
          var prevTest,
            tests = getTests(pos),
            staticAlternations = [];
          if (tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0)) for (var i = 0; i < tests.length; i++) {
            if (tests[i].match.optionality !== !0 && tests[i].match.optionalQuantifier !== !0 && (null === tests[i].match.fn || void 0 === prevTest || tests[i].match.fn.test(prevTest.match.def, getMaskSet(), pos, !0, opts) !== !1) && (staticAlternations.push(tests[i]), null === tests[i].match.fn && (prevTest = tests[i]), staticAlternations.length > 1 && /[0-9a-bA-Z]/.test(staticAlternations[0].match.def))) return opts.placeholder.charAt(pos % opts.placeholder.length);
          }
        }
        return test.def;
      }
      return opts.placeholder.charAt(pos % opts.placeholder.length);
    }
    function checkVal(input, writeOut, strict, nptvl, initiatingEvent, stickyCaret) {
      function isTemplateMatch() {
        var isMatch = !1,
          charCodeNdx = getBufferTemplate().slice(initialNdx, seekNext(initialNdx)).join("").indexOf(charCodes);
        if (charCodeNdx !== -1 && !isMask(initialNdx)) {
          isMatch = !0;
          for (var bufferTemplateArr = getBufferTemplate().slice(initialNdx, initialNdx + charCodeNdx), i = 0; i < bufferTemplateArr.length; i++) {
            if (" " !== bufferTemplateArr[i]) {
              isMatch = !1;
              break;
            }
          }
        }
        return isMatch;
      }
      var inputValue = nptvl.slice(),
        charCodes = "",
        initialNdx = 0,
        result = void 0;
      if (resetMaskSet(), getMaskSet().p = seekNext(-1), !strict) if (opts.autoUnmask !== !0) {
        var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(""),
          matches = inputValue.join("").match(new RegExp("^" + Inputmask.escapeRegex(staticInput), "g"));
        matches && matches.length > 0 && (inputValue.splice(0, matches.length * staticInput.length), initialNdx = seekNext(initialNdx));
      } else initialNdx = seekNext(initialNdx);
      if ($.each(inputValue, function (ndx, charCode) {
        if (void 0 !== charCode) {
          var keypress = new $.Event("keypress");
          keypress.which = charCode.charCodeAt(0), charCodes += charCode;
          var lvp = getLastValidPosition(void 0, !0),
            lvTest = getMaskSet().validPositions[lvp],
            nextTest = getTestTemplate(lvp + 1, lvTest ? lvTest.locator.slice() : void 0, lvp);
          if (!isTemplateMatch() || strict || opts.autoUnmask) {
            var pos = strict ? ndx : null == nextTest.match.fn && nextTest.match.optionality && lvp + 1 < getMaskSet().p ? lvp + 1 : getMaskSet().p;
            result = EventHandlers.keypressEvent.call(input, keypress, !0, !1, strict, pos), initialNdx = pos + 1, charCodes = "";
          } else result = EventHandlers.keypressEvent.call(input, keypress, !0, !1, !0, lvp + 1);
          if (!strict && $.isFunction(opts.onBeforeWrite) && (result = opts.onBeforeWrite(keypress, getBuffer(), result.forwardPosition, opts), result && result.refreshFromBuffer)) {
            var refresh = result.refreshFromBuffer;
            refreshFromBuffer(refresh === !0 ? refresh : refresh.start, refresh.end, result.buffer), resetMaskSet(!0), result.caret && (getMaskSet().p = result.caret);
          }
        }
      }), writeOut) {
        var caretPos = void 0,
          lvp = getLastValidPosition();
        document.activeElement === input && (initiatingEvent || result) && (caretPos = caret(input).begin, initiatingEvent && result === !1 && (caretPos = seekNext(getLastValidPosition(caretPos))), result && stickyCaret !== !0 && (caretPos < lvp + 1 || lvp === -1) && (caretPos = opts.numericInput && void 0 === result.caret ? seekPrevious(result.forwardPosition) : result.forwardPosition)), writeBuffer(input, getBuffer(), caretPos, initiatingEvent || new $.Event("checkval"));
      }
    }
    function unmaskedvalue(input) {
      if (input && void 0 === input.inputmask) return input.value;
      var umValue = [],
        vps = getMaskSet().validPositions;
      for (var pndx in vps) {
        vps[pndx].match && null != vps[pndx].match.fn && umValue.push(vps[pndx].input);
      }
      var unmaskedValue = 0 === umValue.length ? "" : (isRTL ? umValue.reverse() : umValue).join("");
      if ($.isFunction(opts.onUnMask)) {
        var bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join("");
        unmaskedValue = opts.onUnMask(bufferValue, unmaskedValue, opts) || unmaskedValue;
      }
      return unmaskedValue;
    }
    function caret(input, begin, end, notranslate) {
      function translatePosition(pos) {
        if (notranslate !== !0 && isRTL && "number" == typeof pos && (!opts.greedy || "" !== opts.placeholder)) {
          var bffrLght = getBuffer().join("").length;
          pos = bffrLght - pos;
        }
        return pos;
      }
      var range;
      if ("number" != typeof begin) return input.setSelectionRange ? (begin = input.selectionStart, end = input.selectionEnd) : window.getSelection ? (range = window.getSelection().getRangeAt(0), range.commonAncestorContainer.parentNode !== input && range.commonAncestorContainer !== input || (begin = range.startOffset, end = range.endOffset)) : document.selection && document.selection.createRange && (range = document.selection.createRange(), begin = 0 - range.duplicate().moveStart("character", -input.inputmask._valueGet().length), end = begin + range.text.length), {
        begin: translatePosition(begin),
        end: translatePosition(end)
      };
      begin = translatePosition(begin), end = translatePosition(end), end = "number" == typeof end ? end : begin;
      var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;
      if (input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0, mobile || opts.insertMode !== !1 || begin !== end || end++, input.setSelectionRange) input.selectionStart = begin, input.selectionEnd = end;else if (window.getSelection) {
        if (range = document.createRange(), void 0 === input.firstChild || null === input.firstChild) {
          var textNode = document.createTextNode("");
          input.appendChild(textNode);
        }
        range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length), range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length), range.collapse(!0);
        var sel = window.getSelection();
        sel.removeAllRanges(), sel.addRange(range);
      } else input.createTextRange && (range = input.createTextRange(), range.collapse(!0), range.moveEnd("character", end), range.moveStart("character", begin), range.select());
      renderColorMask(input, void 0, {
        begin: begin,
        end: end
      });
    }
    function determineLastRequiredPosition(returnDefinition) {
      var pos,
        testPos,
        buffer = getBuffer(),
        bl = buffer.length,
        lvp = getLastValidPosition(),
        positions = {},
        lvTest = getMaskSet().validPositions[lvp],
        ndxIntlzr = void 0 !== lvTest ? lvTest.locator.slice() : void 0;
      for (pos = lvp + 1; pos < buffer.length; pos++) {
        testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), ndxIntlzr = testPos.locator.slice(), positions[pos] = $.extend(!0, {}, testPos);
      }
      var lvTestAlt = lvTest && void 0 !== lvTest.alternation ? lvTest.locator[lvTest.alternation] : void 0;
      for (pos = bl - 1; pos > lvp && (testPos = positions[pos], (testPos.match.optionality || testPos.match.optionalQuantifier || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && null != testPos.match.fn || null === testPos.match.fn && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.toString().split(",")) && "" !== getTests(pos)[0].def)) && buffer[pos] === getPlaceholder(pos, testPos.match)); pos--) {
        bl--;
      }
      return returnDefinition ? {
        l: bl,
        def: positions[bl] ? positions[bl].match : void 0
      } : bl;
    }
    function clearOptionalTail(buffer) {
      for (var rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) {
        ;
      }
      return buffer.splice(rl, lmib + 1 - rl), buffer;
    }
    function isComplete(buffer) {
      if ($.isFunction(opts.isComplete)) return opts.isComplete(buffer, opts);
      if ("*" !== opts.repeat) {
        var complete = !1,
          lrp = determineLastRequiredPosition(!0),
          aml = seekPrevious(lrp.l);
        if (void 0 === lrp.def || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {
          complete = !0;
          for (var i = 0; i <= aml; i++) {
            var test = getTestTemplate(i).match;
            if (null !== test.fn && void 0 === getMaskSet().validPositions[i] && test.optionality !== !0 && test.optionalQuantifier !== !0 || null === test.fn && buffer[i] !== getPlaceholder(i, test)) {
              complete = !1;
              break;
            }
          }
        }
        return complete;
      }
    }
    function handleRemove(input, k, pos, strict) {
      function generalize() {
        if (opts.keepStatic) {
          for (var validInputs = [], lastAlt = getLastValidPosition(-1, !0), positionsClone = $.extend(!0, {}, getMaskSet().validPositions), prevAltPos = getMaskSet().validPositions[lastAlt]; lastAlt >= 0; lastAlt--) {
            var altPos = getMaskSet().validPositions[lastAlt];
            if (altPos) {
              if (altPos.generatedInput !== !0 && /[0-9a-bA-Z]/.test(altPos.input) && validInputs.push(altPos.input), delete getMaskSet().validPositions[lastAlt], void 0 !== altPos.alternation && altPos.locator[altPos.alternation] !== prevAltPos.locator[altPos.alternation]) break;
              prevAltPos = altPos;
            }
          }
          if (lastAlt > -1) for (getMaskSet().p = seekNext(getLastValidPosition(-1, !0)); validInputs.length > 0;) {
            var keypress = new $.Event("keypress");
            keypress.which = validInputs.pop().charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !1, !1, getMaskSet().p);
          } else getMaskSet().validPositions = $.extend(!0, {}, positionsClone);
        }
      }
      if ((opts.numericInput || isRTL) && (k === Inputmask.keyCode.BACKSPACE ? k = Inputmask.keyCode.DELETE : k === Inputmask.keyCode.DELETE && (k = Inputmask.keyCode.BACKSPACE), isRTL)) {
        var pend = pos.end;
        pos.end = pos.begin, pos.begin = pend;
      }
      k === Inputmask.keyCode.BACKSPACE && (pos.end - pos.begin < 1 || opts.insertMode === !1) ? (pos.begin = seekPrevious(pos.begin), void 0 === getMaskSet().validPositions[pos.begin] || getMaskSet().validPositions[pos.begin].input !== opts.groupSeparator && getMaskSet().validPositions[pos.begin].input !== opts.radixPoint || pos.begin--) : k === Inputmask.keyCode.DELETE && pos.begin === pos.end && (pos.end = isMask(pos.end, !0) ? pos.end + 1 : seekNext(pos.end) + 1, void 0 === getMaskSet().validPositions[pos.begin] || getMaskSet().validPositions[pos.begin].input !== opts.groupSeparator && getMaskSet().validPositions[pos.begin].input !== opts.radixPoint || pos.end++), stripValidPositions(pos.begin, pos.end, !1, strict), strict !== !0 && generalize();
      var lvp = getLastValidPosition(pos.begin, !0);
      lvp < pos.begin ? getMaskSet().p = seekNext(lvp) : strict !== !0 && (getMaskSet().p = pos.begin);
    }
    function initializeColorMask(input) {
      function findCaretPos(clientx) {
        var caretPos,
          e = document.createElement("span");
        for (var style in computedStyle) {
          isNaN(style) && style.indexOf("font") !== -1 && (e.style[style] = computedStyle[style]);
        }
        e.style.textTransform = computedStyle.textTransform, e.style.letterSpacing = computedStyle.letterSpacing, e.style.position = "absolute", e.style.height = "auto", e.style.width = "auto", e.style.visibility = "hidden", e.style.whiteSpace = "nowrap", document.body.appendChild(e);
        var itl,
          inputText = input.inputmask._valueGet(),
          previousWidth = 0;
        for (caretPos = 0, itl = inputText.length; caretPos <= itl; caretPos++) {
          if (e.innerHTML += inputText.charAt(caretPos) || "_", e.offsetWidth >= clientx) {
            var offset1 = clientx - previousWidth,
              offset2 = e.offsetWidth - clientx;
            e.innerHTML = inputText.charAt(caretPos), offset1 -= e.offsetWidth / 3, caretPos = offset1 < offset2 ? caretPos - 1 : caretPos;
            break;
          }
          previousWidth = e.offsetWidth;
        }
        return document.body.removeChild(e), caretPos;
      }
      function position() {
        colorMask.style.position = "absolute", colorMask.style.top = offset.top + "px", colorMask.style.left = offset.left + "px", colorMask.style.width = parseInt(input.offsetWidth) - parseInt(computedStyle.paddingLeft) - parseInt(computedStyle.paddingRight) - parseInt(computedStyle.borderLeftWidth) - parseInt(computedStyle.borderRightWidth) + "px", colorMask.style.height = parseInt(input.offsetHeight) - parseInt(computedStyle.paddingTop) - parseInt(computedStyle.paddingBottom) - parseInt(computedStyle.borderTopWidth) - parseInt(computedStyle.borderBottomWidth) + "px", colorMask.style.lineHeight = colorMask.style.height, colorMask.style.zIndex = isNaN(computedStyle.zIndex) ? -1 : computedStyle.zIndex - 1, colorMask.style.webkitAppearance = "textfield", colorMask.style.mozAppearance = "textfield", colorMask.style.Appearance = "textfield";
      }
      var offset = $(input).position(),
        computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null);
      input.parentNode;
      colorMask = document.createElement("div"), document.body.appendChild(colorMask);
      for (var style in computedStyle) {
        isNaN(style) && "cssText" !== style && style.indexOf("webkit") == -1 && (colorMask.style[style] = computedStyle[style]);
      }
      input.style.backgroundColor = "transparent", input.style.color = "transparent", input.style.webkitAppearance = "caret", input.style.mozAppearance = "caret", input.style.Appearance = "caret", position(), $(window).on("resize", function (e) {
        offset = $(input).position(), computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null), position();
      }), $(input).on("click", function (e) {
        return caret(input, findCaretPos(e.clientX)), EventHandlers.clickEvent.call(this, [e]);
      }), $(input).on("keydown", function (e) {
        e.shiftKey || opts.insertMode === !1 || setTimeout(function () {
          renderColorMask(input);
        }, 0);
      });
    }
    function renderColorMask(input, buffer, caretPos) {
      function handleStatic() {
        _static || null !== test.fn && void 0 !== testPos.input ? _static && null !== test.fn && void 0 !== testPos.input && (_static = !1, maskTemplate += "</span>") : (_static = !0, maskTemplate += "<span class='im-static''>");
      }
      if (void 0 !== colorMask) {
        buffer = buffer || getBuffer(), void 0 === caretPos ? caretPos = caret(input) : void 0 === caretPos.begin && (caretPos = {
          begin: caretPos,
          end: caretPos
        });
        var maskTemplate = "",
          _static = !1;
        if ("" != buffer) {
          var ndxIntlzr,
            test,
            testPos,
            pos = 0,
            lvp = getLastValidPosition();
          do {
            pos === caretPos.begin && document.activeElement === input && (maskTemplate += "<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>"), getMaskSet().validPositions[pos] ? (testPos = getMaskSet().validPositions[pos], test = testPos.match, ndxIntlzr = testPos.locator.slice(), handleStatic(), maskTemplate += testPos.input) : (testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), test = testPos.match, ndxIntlzr = testPos.locator.slice(), (opts.jitMasking === !1 || pos < lvp || "number" == typeof opts.jitMasking && isFinite(opts.jitMasking) && opts.jitMasking > pos) && (handleStatic(), maskTemplate += getPlaceholder(pos, test))), pos++;
          } while ((void 0 === maxLength || pos < maxLength) && (null !== test.fn || "" !== test.def) || lvp > pos);
        }
        colorMask.innerHTML = maskTemplate;
      }
    }
    function mask(elem) {
      function isElementTypeSupported(input, opts) {
        function patchValueProperty(npt) {
          function patchValhook(type) {
            if ($.valHooks && (void 0 === $.valHooks[type] || $.valHooks[type].inputmaskpatch !== !0)) {
              var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function (elem) {
                  return elem.value;
                },
                valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function (elem, value) {
                  return elem.value = value, elem;
                };
              $.valHooks[type] = {
                get: function get(elem) {
                  if (elem.inputmask) {
                    if (elem.inputmask.opts.autoUnmask) return elem.inputmask.unmaskedvalue();
                    var result = valhookGet(elem);
                    return getLastValidPosition(void 0, void 0, elem.inputmask.maskset.validPositions) !== -1 || opts.nullable !== !0 ? result : "";
                  }
                  return valhookGet(elem);
                },
                set: function set(elem, value) {
                  var result,
                    $elem = $(elem);
                  return result = valhookSet(elem, value), elem.inputmask && $elem.trigger("setvalue"), result;
                },
                inputmaskpatch: !0
              };
            }
          }
          function getter() {
            return this.inputmask ? this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : getLastValidPosition() !== -1 || opts.nullable !== !0 ? document.activeElement === this && opts.clearMaskOnLostFocus ? (isRTL ? clearOptionalTail(getBuffer().slice()).reverse() : clearOptionalTail(getBuffer().slice())).join("") : valueGet.call(this) : "" : valueGet.call(this);
          }
          function setter(value) {
            valueSet.call(this, value), this.inputmask && $(this).trigger("setvalue");
          }
          function installNativeValueSetFallback(npt) {
            EventRuler.on(npt, "mouseenter", function (event) {
              var $input = $(this),
                input = this,
                value = input.inputmask._valueGet();
              value !== getBuffer().join("") && $input.trigger("setvalue");
            });
          }
          var valueGet, valueSet;
          if (!npt.inputmask.__valueGet) {
            if (opts.noValuePatching !== !0) {
              if (Object.getOwnPropertyDescriptor) {
                "function" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = "object" == _typeof("test".__proto__) ? function (object) {
                  return object.__proto__;
                } : function (object) {
                  return object.constructor.prototype;
                });
                var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), "value") : void 0;
                valueProperty && valueProperty.get && valueProperty.set ? (valueGet = valueProperty.get, valueSet = valueProperty.set, Object.defineProperty(npt, "value", {
                  get: getter,
                  set: setter,
                  configurable: !0
                })) : "INPUT" !== npt.tagName && (valueGet = function valueGet() {
                  return this.textContent;
                }, valueSet = function valueSet(value) {
                  this.textContent = value;
                }, Object.defineProperty(npt, "value", {
                  get: getter,
                  set: setter,
                  configurable: !0
                }));
              } else document.__lookupGetter__ && npt.__lookupGetter__("value") && (valueGet = npt.__lookupGetter__("value"), valueSet = npt.__lookupSetter__("value"), npt.__defineGetter__("value", getter), npt.__defineSetter__("value", setter));
              npt.inputmask.__valueGet = valueGet, npt.inputmask.__valueSet = valueSet;
            }
            npt.inputmask._valueGet = function (overruleRTL) {
              return isRTL && overruleRTL !== !0 ? valueGet.call(this.el).split("").reverse().join("") : valueGet.call(this.el);
            }, npt.inputmask._valueSet = function (value, overruleRTL) {
              valueSet.call(this.el, null === value || void 0 === value ? "" : overruleRTL !== !0 && isRTL ? value.split("").reverse().join("") : value);
            }, void 0 === valueGet && (valueGet = function valueGet() {
              return this.value;
            }, valueSet = function valueSet(value) {
              this.value = value;
            }, patchValhook(npt.type), installNativeValueSetFallback(npt));
          }
        }
        var elementType = input.getAttribute("type"),
          isSupported = "INPUT" === input.tagName && $.inArray(elementType, opts.supportsInputType) !== -1 || input.isContentEditable || "TEXTAREA" === input.tagName;
        if (!isSupported) if ("INPUT" === input.tagName) {
          var el = document.createElement("input");
          el.setAttribute("type", elementType), isSupported = "text" === el.type, el = null;
        } else isSupported = "partial";
        return isSupported !== !1 && patchValueProperty(input), isSupported;
      }
      var isSupported = isElementTypeSupported(elem, opts);
      if (isSupported !== !1 && (el = elem, $el = $(el), ("rtl" === el.dir || opts.rightAlign) && (el.style.textAlign = "right"), ("rtl" === el.dir || opts.numericInput) && (el.dir = "ltr", el.removeAttribute("dir"), el.inputmask.isRTL = !0, isRTL = !0), opts.colorMask === !0 && initializeColorMask(el), android && (el.hasOwnProperty("inputmode") && (el.inputmode = opts.inputmode, el.setAttribute("inputmode", opts.inputmode)), "rtfm" === opts.androidHack && (opts.colorMask !== !0 && initializeColorMask(el), el.type = "password")), EventRuler.off(el), isSupported === !0 && (EventRuler.on(el, "submit", EventHandlers.submitEvent), EventRuler.on(el, "reset", EventHandlers.resetEvent), EventRuler.on(el, "mouseenter", EventHandlers.mouseenterEvent), EventRuler.on(el, "blur", EventHandlers.blurEvent), EventRuler.on(el, "focus", EventHandlers.focusEvent), EventRuler.on(el, "mouseleave", EventHandlers.mouseleaveEvent), opts.colorMask !== !0 && EventRuler.on(el, "click", EventHandlers.clickEvent), EventRuler.on(el, "dblclick", EventHandlers.dblclickEvent), EventRuler.on(el, "paste", EventHandlers.pasteEvent), EventRuler.on(el, "dragdrop", EventHandlers.pasteEvent), EventRuler.on(el, "drop", EventHandlers.pasteEvent), EventRuler.on(el, "cut", EventHandlers.cutEvent), EventRuler.on(el, "complete", opts.oncomplete), EventRuler.on(el, "incomplete", opts.onincomplete), EventRuler.on(el, "cleared", opts.oncleared), opts.inputEventOnly !== !0 && (EventRuler.on(el, "keydown", EventHandlers.keydownEvent), EventRuler.on(el, "keypress", EventHandlers.keypressEvent)), EventRuler.on(el, "compositionstart", $.noop), EventRuler.on(el, "compositionupdate", $.noop), EventRuler.on(el, "compositionend", $.noop), EventRuler.on(el, "keyup", $.noop), EventRuler.on(el, "input", EventHandlers.inputFallBackEvent)), EventRuler.on(el, "setvalue", EventHandlers.setValueEvent), getBufferTemplate(), "" !== el.inputmask._valueGet() || opts.clearMaskOnLostFocus === !1 || document.activeElement === el)) {
        var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(el.inputmask._valueGet(), opts) || el.inputmask._valueGet() : el.inputmask._valueGet();
        checkVal(el, !0, !1, initialValue.split(""));
        var buffer = getBuffer().slice();
        undoValue = buffer.join(""), isComplete(buffer) === !1 && opts.clearIncomplete && resetMaskSet(), opts.clearMaskOnLostFocus && document.activeElement !== el && (getLastValidPosition() === -1 ? buffer = [] : clearOptionalTail(buffer)), writeBuffer(el, buffer), document.activeElement === el && caret(el, seekNext(getLastValidPosition()));
      }
    }
    maskset = maskset || this.maskset, opts = opts || this.opts;
    var undoValue,
      $el,
      maxLength,
      colorMask,
      valueBuffer,
      el = this.el,
      isRTL = this.isRTL,
      skipKeyPressEvent = !1,
      skipInputEvent = !1,
      ignorable = !1,
      mouseEnter = !1,
      EventRuler = {
        on: function on(input, eventName, eventHandler) {
          var ev = function ev(e) {
            if (void 0 === this.inputmask && "FORM" !== this.nodeName) {
              var imOpts = $.data(this, "_inputmask_opts");
              imOpts ? new Inputmask(imOpts).mask(this) : EventRuler.off(this);
            } else {
              if ("setvalue" === e.type || !(this.disabled || this.readOnly && !("keydown" === e.type && e.ctrlKey && 67 === e.keyCode || opts.tabThrough === !1 && e.keyCode === Inputmask.keyCode.TAB))) {
                switch (e.type) {
                  case "input":
                    if (skipInputEvent === !0) return skipInputEvent = !1, e.preventDefault();
                    break;
                  case "keydown":
                    skipKeyPressEvent = !1, skipInputEvent = !1;
                    break;
                  case "keypress":
                    if (skipKeyPressEvent === !0) return e.preventDefault();
                    skipKeyPressEvent = !0;
                    break;
                  case "click":
                    if (iemobile || iphone) {
                      var that = this,
                        args = arguments;
                      return setTimeout(function () {
                        eventHandler.apply(that, args);
                      }, 0), !1;
                    }
                }
                var returnVal = eventHandler.apply(this, arguments);
                return returnVal === !1 && (e.preventDefault(), e.stopPropagation()), returnVal;
              }
              e.preventDefault();
            }
          };
          input.inputmask.events[eventName] = input.inputmask.events[eventName] || [], input.inputmask.events[eventName].push(ev), $.inArray(eventName, ["submit", "reset"]) !== -1 ? null != input.form && $(input.form).on(eventName, ev) : $(input).on(eventName, ev);
        },
        off: function off(input, event) {
          if (input.inputmask && input.inputmask.events) {
            var events;
            event ? (events = [], events[event] = input.inputmask.events[event]) : events = input.inputmask.events, $.each(events, function (eventName, evArr) {
              for (; evArr.length > 0;) {
                var ev = evArr.pop();
                $.inArray(eventName, ["submit", "reset"]) !== -1 ? null != input.form && $(input.form).off(eventName, ev) : $(input).off(eventName, ev);
              }
              delete input.inputmask.events[eventName];
            });
          }
        }
      },
      EventHandlers = {
        keydownEvent: function keydownEvent(e) {
          function isInputEventSupported(eventName) {
            var el = document.createElement("input"),
              evName = "on" + eventName,
              isSupported = (evName in el);
            return isSupported || (el.setAttribute(evName, "return;"), isSupported = "function" == typeof el[evName]), el = null, isSupported;
          }
          var input = this,
            $input = $(input),
            k = e.keyCode,
            pos = caret(input);
          if (k === Inputmask.keyCode.BACKSPACE || k === Inputmask.keyCode.DELETE || iphone && k === Inputmask.keyCode.BACKSPACE_SAFARI || e.ctrlKey && k === Inputmask.keyCode.X && !isInputEventSupported("cut")) e.preventDefault(), handleRemove(input, k, pos), writeBuffer(input, getBuffer(!0), getMaskSet().p, e, input.inputmask._valueGet() !== getBuffer().join("")), input.inputmask._valueGet() === getBufferTemplate().join("") ? $input.trigger("cleared") : isComplete(getBuffer()) === !0 && $input.trigger("complete");else if (k === Inputmask.keyCode.END || k === Inputmask.keyCode.PAGE_DOWN) {
            e.preventDefault();
            var caretPos = seekNext(getLastValidPosition());
            opts.insertMode || caretPos !== getMaskSet().maskLength || e.shiftKey || caretPos--, caret(input, e.shiftKey ? pos.begin : caretPos, caretPos, !0);
          } else k === Inputmask.keyCode.HOME && !e.shiftKey || k === Inputmask.keyCode.PAGE_UP ? (e.preventDefault(), caret(input, 0, e.shiftKey ? pos.begin : 0, !0)) : (opts.undoOnEscape && k === Inputmask.keyCode.ESCAPE || 90 === k && e.ctrlKey) && e.altKey !== !0 ? (checkVal(input, !0, !1, undoValue.split("")), $input.trigger("click")) : k !== Inputmask.keyCode.INSERT || e.shiftKey || e.ctrlKey ? opts.tabThrough === !0 && k === Inputmask.keyCode.TAB ? (e.shiftKey === !0 ? (null === getTest(pos.begin).match.fn && (pos.begin = seekNext(pos.begin)), pos.end = seekPrevious(pos.begin, !0), pos.begin = seekPrevious(pos.end, !0)) : (pos.begin = seekNext(pos.begin, !0), pos.end = seekNext(pos.begin, !0), pos.end < getMaskSet().maskLength && pos.end--), pos.begin < getMaskSet().maskLength && (e.preventDefault(), caret(input, pos.begin, pos.end))) : e.shiftKey || opts.insertMode === !1 && (k === Inputmask.keyCode.RIGHT ? setTimeout(function () {
            var caretPos = caret(input);
            caret(input, caretPos.begin);
          }, 0) : k === Inputmask.keyCode.LEFT && setTimeout(function () {
            var caretPos = caret(input);
            caret(input, isRTL ? caretPos.begin + 1 : caretPos.begin - 1);
          }, 0)) : (opts.insertMode = !opts.insertMode, caret(input, opts.insertMode || pos.begin !== getMaskSet().maskLength ? pos.begin : pos.begin - 1));
          opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts), ignorable = $.inArray(k, opts.ignorables) !== -1;
        },
        keypressEvent: function keypressEvent(e, checkval, writeOut, strict, ndx) {
          var input = this,
            $input = $(input),
            k = e.which || e.charCode || e.keyCode;
          if (!(checkval === !0 || e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable)) return k === Inputmask.keyCode.ENTER && undoValue !== getBuffer().join("") && (undoValue = getBuffer().join(""), setTimeout(function () {
            $input.trigger("change");
          }, 0)), !0;
          if (k) {
            46 === k && e.shiftKey === !1 && "," === opts.radixPoint && (k = 44);
            var forwardPosition,
              pos = checkval ? {
                begin: ndx,
                end: ndx
              } : caret(input),
              c = String.fromCharCode(k);
            getMaskSet().writeOutBuffer = !0;
            var valResult = isValid(pos, c, strict);
            if (valResult !== !1 && (resetMaskSet(!0), forwardPosition = void 0 !== valResult.caret ? valResult.caret : checkval ? valResult.pos + 1 : seekNext(valResult.pos), getMaskSet().p = forwardPosition), writeOut !== !1) {
              var self = this;
              if (setTimeout(function () {
                opts.onKeyValidation.call(self, k, valResult, opts);
              }, 0), getMaskSet().writeOutBuffer && valResult !== !1) {
                var buffer = getBuffer();
                writeBuffer(input, buffer, opts.numericInput && void 0 === valResult.caret ? seekPrevious(forwardPosition) : forwardPosition, e, checkval !== !0), checkval !== !0 && setTimeout(function () {
                  isComplete(buffer) === !0 && $input.trigger("complete");
                }, 0);
              }
            }
            if (e.preventDefault(), checkval) return valResult.forwardPosition = forwardPosition, valResult;
          }
        },
        pasteEvent: function pasteEvent(e) {
          var tempValue,
            input = this,
            ev = e.originalEvent || e,
            $input = $(input),
            inputValue = input.inputmask._valueGet(!0),
            caretPos = caret(input);
          isRTL && (tempValue = caretPos.end, caretPos.end = caretPos.begin, caretPos.begin = tempValue);
          var valueBeforeCaret = inputValue.substr(0, caretPos.begin),
            valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);
          if (valueBeforeCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(0, caretPos.begin).join("") && (valueBeforeCaret = ""), valueAfterCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(caretPos.end).join("") && (valueAfterCaret = ""), isRTL && (tempValue = valueBeforeCaret, valueBeforeCaret = valueAfterCaret, valueAfterCaret = tempValue), window.clipboardData && window.clipboardData.getData) inputValue = valueBeforeCaret + window.clipboardData.getData("Text") + valueAfterCaret;else {
            if (!ev.clipboardData || !ev.clipboardData.getData) return !0;
            inputValue = valueBeforeCaret + ev.clipboardData.getData("text/plain") + valueAfterCaret;
          }
          var pasteValue = inputValue;
          if ($.isFunction(opts.onBeforePaste)) {
            if (pasteValue = opts.onBeforePaste(inputValue, opts), pasteValue === !1) return e.preventDefault();
            pasteValue || (pasteValue = inputValue);
          }
          return checkVal(input, !1, !1, isRTL ? pasteValue.split("").reverse() : pasteValue.toString().split("")), writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()), e, undoValue !== getBuffer().join("")), isComplete(getBuffer()) === !0 && $input.trigger("complete"), e.preventDefault();
        },
        inputFallBackEvent: function inputFallBackEvent(e) {
          var input = this,
            inputValue = input.inputmask._valueGet();
          if (getBuffer().join("") !== inputValue) {
            var caretPos = caret(input);
            if (inputValue = inputValue.replace(new RegExp("(" + Inputmask.escapeRegex(getBufferTemplate().join("")) + ")*"), ""), iemobile) {
              var inputChar = inputValue.replace(getBuffer().join(""), "");
              if (1 === inputChar.length) {
                var keypress = new $.Event("keypress");
                return keypress.which = inputChar.charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !0, !1, getMaskSet().validPositions[caretPos.begin - 1] ? caretPos.begin : caretPos.begin - 1), !1;
              }
            }
            if (caretPos.begin > inputValue.length && (caret(input, inputValue.length), caretPos = caret(input)), getBuffer().length - inputValue.length !== 1 || inputValue.charAt(caretPos.begin) === getBuffer()[caretPos.begin] || inputValue.charAt(caretPos.begin + 1) === getBuffer()[caretPos.begin] || isMask(caretPos.begin)) {
              for (var lvp = getLastValidPosition() + 1, bufferTemplate = getBufferTemplate().join(""); null === inputValue.match(Inputmask.escapeRegex(bufferTemplate) + "$");) {
                bufferTemplate = bufferTemplate.slice(1);
              }
              inputValue = inputValue.replace(bufferTemplate, ""), inputValue = inputValue.split(""), checkVal(input, !0, !1, inputValue, e, caretPos.begin < lvp), isComplete(getBuffer()) === !0 && $(input).trigger("complete");
            } else e.keyCode = Inputmask.keyCode.BACKSPACE, EventHandlers.keydownEvent.call(input, e);
            e.preventDefault();
          }
        },
        setValueEvent: function setValueEvent(e) {
          var input = this,
            value = input.inputmask._valueGet();
          checkVal(input, !0, !1, ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(value, opts) || value : value).split("")), undoValue = getBuffer().join(""), (opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate().join("") && input.inputmask._valueSet("");
        },
        focusEvent: function focusEvent(e) {
          var input = this,
            nptValue = input.inputmask._valueGet();
          opts.showMaskOnFocus && (!opts.showMaskOnHover || opts.showMaskOnHover && "" === nptValue) && (input.inputmask._valueGet() !== getBuffer().join("") ? writeBuffer(input, getBuffer(), seekNext(getLastValidPosition())) : mouseEnter === !1 && caret(input, seekNext(getLastValidPosition()))), opts.positionCaretOnTab === !0 && EventHandlers.clickEvent.apply(input, [e, !0]), undoValue = getBuffer().join("");
        },
        mouseleaveEvent: function mouseleaveEvent(e) {
          var input = this;
          if (mouseEnter = !1, opts.clearMaskOnLostFocus && document.activeElement !== input) {
            var buffer = getBuffer().slice(),
              nptValue = input.inputmask._valueGet();
            nptValue !== input.getAttribute("placeholder") && "" !== nptValue && (getLastValidPosition() === -1 && nptValue === getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer), writeBuffer(input, buffer));
          }
        },
        clickEvent: function clickEvent(e, tabbed) {
          function doRadixFocus(clickPos) {
            if ("" !== opts.radixPoint) {
              var vps = getMaskSet().validPositions;
              if (void 0 === vps[clickPos] || vps[clickPos].input === getPlaceholder(clickPos)) {
                if (clickPos < seekNext(-1)) return !0;
                var radixPos = $.inArray(opts.radixPoint, getBuffer());
                if (radixPos !== -1) {
                  for (var vp in vps) {
                    if (radixPos < vp && vps[vp].input !== getPlaceholder(vp)) return !1;
                  }
                  return !0;
                }
              }
            }
            return !1;
          }
          var input = this;
          setTimeout(function () {
            if (document.activeElement === input) {
              var selectedCaret = caret(input);
              if (tabbed && (selectedCaret.begin = selectedCaret.end), selectedCaret.begin === selectedCaret.end) switch (opts.positionCaretOnClick) {
                case "none":
                  break;
                case "radixFocus":
                  if (doRadixFocus(selectedCaret.begin)) {
                    var radixPos = $.inArray(opts.radixPoint, getBuffer().join(""));
                    caret(input, opts.numericInput ? seekNext(radixPos) : radixPos);
                    break;
                  }
                default:
                  var clickPosition = selectedCaret.begin,
                    lvclickPosition = getLastValidPosition(clickPosition, !0),
                    lastPosition = seekNext(lvclickPosition);
                  if (clickPosition < lastPosition) caret(input, isMask(clickPosition) || isMask(clickPosition - 1) ? clickPosition : seekNext(clickPosition));else {
                    var placeholder = getPlaceholder(lastPosition);
                    ("" !== placeholder && getBuffer()[lastPosition] !== placeholder && getTest(lastPosition).match.optionalQuantifier !== !0 || !isMask(lastPosition) && getTest(lastPosition).match.def === placeholder) && (lastPosition = seekNext(lastPosition)), caret(input, lastPosition);
                  }
              }
            }
          }, 0);
        },
        dblclickEvent: function dblclickEvent(e) {
          var input = this;
          setTimeout(function () {
            caret(input, 0, seekNext(getLastValidPosition()));
          }, 0);
        },
        cutEvent: function cutEvent(e) {
          var input = this,
            $input = $(input),
            pos = caret(input),
            ev = e.originalEvent || e,
            clipboardData = window.clipboardData || ev.clipboardData,
            clipData = isRTL ? getBuffer().slice(pos.end, pos.begin) : getBuffer().slice(pos.begin, pos.end);
          clipboardData.setData("text", isRTL ? clipData.reverse().join("") : clipData.join("")), document.execCommand && document.execCommand("copy"), handleRemove(input, Inputmask.keyCode.DELETE, pos), writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue !== getBuffer().join("")), input.inputmask._valueGet() === getBufferTemplate().join("") && $input.trigger("cleared");
        },
        blurEvent: function blurEvent(e) {
          var $input = $(this),
            input = this;
          if (input.inputmask) {
            var nptValue = input.inputmask._valueGet(),
              buffer = getBuffer().slice();
            undoValue !== buffer.join("") && setTimeout(function () {
              $input.trigger("change"), undoValue = buffer.join("");
            }, 0), "" !== nptValue && (opts.clearMaskOnLostFocus && (getLastValidPosition() === -1 && nptValue === getBufferTemplate().join("") ? buffer = [] : clearOptionalTail(buffer)), isComplete(buffer) === !1 && (setTimeout(function () {
              $input.trigger("incomplete");
            }, 0), opts.clearIncomplete && (resetMaskSet(), buffer = opts.clearMaskOnLostFocus ? [] : getBufferTemplate().slice())), writeBuffer(input, buffer, void 0, e));
          }
        },
        mouseenterEvent: function mouseenterEvent(e) {
          var input = this;
          mouseEnter = !0, document.activeElement !== input && opts.showMaskOnHover && input.inputmask._valueGet() !== getBuffer().join("") && writeBuffer(input, getBuffer());
        },
        submitEvent: function submitEvent(e) {
          undoValue !== getBuffer().join("") && $el.trigger("change"), opts.clearMaskOnLostFocus && getLastValidPosition() === -1 && el.inputmask._valueGet && el.inputmask._valueGet() === getBufferTemplate().join("") && el.inputmask._valueSet(""), opts.removeMaskOnSubmit && (el.inputmask._valueSet(el.inputmask.unmaskedvalue(), !0), setTimeout(function () {
            writeBuffer(el, getBuffer());
          }, 0));
        },
        resetEvent: function resetEvent(e) {
          setTimeout(function () {
            $el.trigger("setvalue");
          }, 0);
        }
      };
    if (void 0 !== actionObj) switch (actionObj.action) {
      case "isComplete":
        return el = actionObj.el, isComplete(getBuffer());
      case "unmaskedvalue":
        return void 0 !== el && void 0 === actionObj.value || (valueBuffer = actionObj.value, valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(valueBuffer, opts) || valueBuffer : valueBuffer).split(""), checkVal(void 0, !1, !1, isRTL ? valueBuffer.reverse() : valueBuffer), $.isFunction(opts.onBeforeWrite) && opts.onBeforeWrite(void 0, getBuffer(), 0, opts)), unmaskedvalue(el);
      case "mask":
        mask(el);
        break;
      case "format":
        return valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(actionObj.value, opts) || actionObj.value : actionObj.value).split(""), checkVal(void 0, !1, !1, isRTL ? valueBuffer.reverse() : valueBuffer), $.isFunction(opts.onBeforeWrite) && opts.onBeforeWrite(void 0, getBuffer(), 0, opts), actionObj.metadata ? {
          value: isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join(""),
          metadata: maskScope.call(this, {
            action: "getmetadata"
          }, maskset, opts)
        } : isRTL ? getBuffer().slice().reverse().join("") : getBuffer().join("");
      case "isValid":
        actionObj.value ? (valueBuffer = actionObj.value.split(""), checkVal(void 0, !1, !0, isRTL ? valueBuffer.reverse() : valueBuffer)) : actionObj.value = getBuffer().join("");
        for (var buffer = getBuffer(), rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) {
          ;
        }
        return buffer.splice(rl, lmib + 1 - rl), isComplete(buffer) && actionObj.value === getBuffer().join("");
      case "getemptymask":
        return getBufferTemplate().join("");
      case "remove":
        if (el) {
          $el = $(el), el.inputmask._valueSet(unmaskedvalue(el)), EventRuler.off(el);
          var valueProperty;
          Object.getOwnPropertyDescriptor && Object.getPrototypeOf ? (valueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(el), "value"), valueProperty && el.inputmask.__valueGet && Object.defineProperty(el, "value", {
            get: el.inputmask.__valueGet,
            set: el.inputmask.__valueSet,
            configurable: !0
          })) : document.__lookupGetter__ && el.__lookupGetter__("value") && el.inputmask.__valueGet && (el.__defineGetter__("value", el.inputmask.__valueGet), el.__defineSetter__("value", el.inputmask.__valueSet)), el.inputmask = void 0;
        }
        return el;
      case "getmetadata":
        if ($.isArray(maskset.metadata)) {
          var maskTarget = getMaskTemplate(!0, 0, !1).join("");
          return $.each(maskset.metadata, function (ndx, mtdt) {
            if (mtdt.mask === maskTarget) return maskTarget = mtdt, !1;
          }), maskTarget;
        }
        return maskset.metadata;
    }
  }
  var ua = navigator.userAgent,
    mobile = /mobile/i.test(ua),
    iemobile = /iemobile/i.test(ua),
    iphone = /iphone/i.test(ua) && !iemobile,
    android = /android/i.test(ua) && !iemobile;
  return Inputmask.prototype = {
    defaults: {
      placeholder: "_",
      optionalmarker: {
        start: "[",
        end: "]"
      },
      quantifiermarker: {
        start: "{",
        end: "}"
      },
      groupmarker: {
        start: "(",
        end: ")"
      },
      alternatormarker: "|",
      escapeChar: "\\",
      mask: null,
      oncomplete: $.noop,
      onincomplete: $.noop,
      oncleared: $.noop,
      repeat: 0,
      greedy: !0,
      autoUnmask: !1,
      removeMaskOnSubmit: !1,
      clearMaskOnLostFocus: !0,
      insertMode: !0,
      clearIncomplete: !1,
      aliases: {},
      alias: null,
      onKeyDown: $.noop,
      onBeforeMask: null,
      onBeforePaste: function onBeforePaste(pastedValue, opts) {
        return $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask(pastedValue, opts) : pastedValue;
      },
      onBeforeWrite: null,
      onUnMask: null,
      showMaskOnFocus: !0,
      showMaskOnHover: !0,
      onKeyValidation: $.noop,
      skipOptionalPartCharacter: " ",
      numericInput: !1,
      rightAlign: !1,
      undoOnEscape: !0,
      radixPoint: "",
      radixPointDefinitionSymbol: void 0,
      groupSeparator: "",
      keepStatic: null,
      positionCaretOnTab: !0,
      tabThrough: !1,
      supportsInputType: ["text", "tel", "password"],
      definitions: {
        "9": {
          validator: "[0-9]",
          cardinality: 1,
          definitionSymbol: "*"
        },
        a: {
          validator: "[A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
          cardinality: 1,
          definitionSymbol: "*"
        },
        "*": {
          validator: "[0-9A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
          cardinality: 1
        }
      },
      ignorables: [8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123],
      isComplete: null,
      canClearPosition: $.noop,
      postValidation: null,
      staticDefinitionSymbol: void 0,
      jitMasking: !1,
      nullable: !0,
      inputEventOnly: !1,
      noValuePatching: !1,
      positionCaretOnClick: "lvp",
      casing: null,
      inputmode: "verbatim",
      colorMask: !1,
      androidHack: !1
    },
    masksCache: {},
    mask: function mask(elems) {
      function importAttributeOptions(npt, opts, userOptions, dataAttribute) {
        function importOption(option, optionData) {
          optionData = void 0 !== optionData ? optionData : npt.getAttribute(dataAttribute + "-" + option), null !== optionData && ("string" == typeof optionData && (0 === option.indexOf("on") ? optionData = window[optionData] : "false" === optionData ? optionData = !1 : "true" === optionData && (optionData = !0)), userOptions[option] = optionData);
        }
        var option,
          dataoptions,
          optionData,
          p,
          attrOptions = npt.getAttribute(dataAttribute);
        if (attrOptions && "" !== attrOptions && (attrOptions = attrOptions.replace(new RegExp("'", "g"), '"'), dataoptions = JSON.parse("{" + attrOptions + "}")), dataoptions) {
          optionData = void 0;
          for (p in dataoptions) {
            if ("alias" === p.toLowerCase()) {
              optionData = dataoptions[p];
              break;
            }
          }
        }
        importOption("alias", optionData), userOptions.alias && resolveAlias(userOptions.alias, userOptions, opts);
        for (option in opts) {
          if (dataoptions) {
            optionData = void 0;
            for (p in dataoptions) {
              if (p.toLowerCase() === option.toLowerCase()) {
                optionData = dataoptions[p];
                break;
              }
            }
          }
          importOption(option, optionData);
        }
        return $.extend(!0, opts, userOptions), opts;
      }
      var that = this;
      return "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), elems = elems.nodeName ? [elems] : elems, $.each(elems, function (ndx, el) {
        var scopedOpts = $.extend(!0, {}, that.opts);
        importAttributeOptions(el, scopedOpts, $.extend(!0, {}, that.userOptions), that.dataAttribute);
        var maskset = generateMaskSet(scopedOpts, that.noMasksCache);
        void 0 !== maskset && (void 0 !== el.inputmask && el.inputmask.remove(), el.inputmask = new Inputmask(), el.inputmask.opts = scopedOpts, el.inputmask.noMasksCache = that.noMasksCache, el.inputmask.userOptions = $.extend(!0, {}, that.userOptions), el.inputmask.el = el, el.inputmask.maskset = maskset, $.data(el, "_inputmask_opts", scopedOpts), maskScope.call(el.inputmask, {
          action: "mask"
        }));
      }), elems && elems[0] ? elems[0].inputmask || this : this;
    },
    option: function option(options, noremask) {
      return "string" == typeof options ? this.opts[options] : "object" == _typeof(options) ? ($.extend(this.userOptions, options), this.el && noremask !== !0 && this.mask(this.el), this) : void 0;
    },
    unmaskedvalue: function unmaskedvalue(value) {
      return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {
        action: "unmaskedvalue",
        value: value
      });
    },
    remove: function remove() {
      return maskScope.call(this, {
        action: "remove"
      });
    },
    getemptymask: function getemptymask() {
      return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {
        action: "getemptymask"
      });
    },
    hasMaskedValue: function hasMaskedValue() {
      return !this.opts.autoUnmask;
    },
    isComplete: function isComplete() {
      return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {
        action: "isComplete"
      });
    },
    getmetadata: function getmetadata() {
      return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {
        action: "getmetadata"
      });
    },
    isValid: function isValid(value) {
      return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {
        action: "isValid",
        value: value
      });
    },
    format: function format(value, metadata) {
      return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {
        action: "format",
        value: value,
        metadata: metadata
      });
    },
    analyseMask: function analyseMask(mask, opts) {
      function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {
        this.matches = [], this.openGroup = isGroup || !1, this.isGroup = isGroup || !1, this.isOptional = isOptional || !1, this.isQuantifier = isQuantifier || !1, this.isAlternator = isAlternator || !1, this.quantifier = {
          min: 1,
          max: 1
        };
      }
      function insertTestDefinition(mtoken, element, position) {
        var maskdef = opts.definitions[element];
        position = void 0 !== position ? position : mtoken.matches.length;
        var prevMatch = mtoken.matches[position - 1];
        if (maskdef && !escaped) {
          maskdef.placeholder = $.isFunction(maskdef.placeholder) ? maskdef.placeholder(opts) : maskdef.placeholder;
          for (var prevalidators = maskdef.prevalidator, prevalidatorsL = prevalidators ? prevalidators.length : 0, i = 1; i < maskdef.cardinality; i++) {
            var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [],
              validator = prevalidator.validator,
              cardinality = prevalidator.cardinality;
            mtoken.matches.splice(position++, 0, {
              fn: validator ? "string" == typeof validator ? new RegExp(validator) : new function () {
                this.test = validator;
              }() : new RegExp("."),
              cardinality: cardinality ? cardinality : 1,
              optionality: mtoken.isOptional,
              newBlockMarker: void 0 === prevMatch || prevMatch.def !== (maskdef.definitionSymbol || element),
              casing: maskdef.casing,
              def: maskdef.definitionSymbol || element,
              placeholder: maskdef.placeholder,
              nativeDef: element
            }), prevMatch = mtoken.matches[position - 1];
          }
          mtoken.matches.splice(position++, 0, {
            fn: maskdef.validator ? "string" == typeof maskdef.validator ? new RegExp(maskdef.validator) : new function () {
              this.test = maskdef.validator;
            }() : new RegExp("."),
            cardinality: maskdef.cardinality,
            optionality: mtoken.isOptional,
            newBlockMarker: void 0 === prevMatch || prevMatch.def !== (maskdef.definitionSymbol || element),
            casing: maskdef.casing,
            def: maskdef.definitionSymbol || element,
            placeholder: maskdef.placeholder,
            nativeDef: element
          });
        } else mtoken.matches.splice(position++, 0, {
          fn: null,
          cardinality: 0,
          optionality: mtoken.isOptional,
          newBlockMarker: void 0 === prevMatch || prevMatch.def !== element,
          casing: null,
          def: opts.staticDefinitionSymbol || element,
          placeholder: void 0 !== opts.staticDefinitionSymbol ? element : void 0,
          nativeDef: element
        }), escaped = !1;
      }
      function verifyGroupMarker(maskToken) {
        maskToken && maskToken.matches && $.each(maskToken.matches, function (ndx, token) {
          var nextToken = maskToken.matches[ndx + 1];
          (void 0 === nextToken || void 0 === nextToken.matches || nextToken.isQuantifier === !1) && token && token.isGroup && (token.isGroup = !1, insertTestDefinition(token, opts.groupmarker.start, 0), token.openGroup !== !0 && insertTestDefinition(token, opts.groupmarker.end)), verifyGroupMarker(token);
        });
      }
      function defaultCase() {
        if (openenings.length > 0) {
          if (currentOpeningToken = openenings[openenings.length - 1], insertTestDefinition(currentOpeningToken, m), currentOpeningToken.isAlternator) {
            alternator = openenings.pop();
            for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
              alternator.matches[mndx].isGroup = !1;
            }
            openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
          }
        } else insertTestDefinition(currentToken, m);
      }
      function reverseTokens(maskToken) {
        function reverseStatic(st) {
          return st === opts.optionalmarker.start ? st = opts.optionalmarker.end : st === opts.optionalmarker.end ? st = opts.optionalmarker.start : st === opts.groupmarker.start ? st = opts.groupmarker.end : st === opts.groupmarker.end && (st = opts.groupmarker.start), st;
        }
        maskToken.matches = maskToken.matches.reverse();
        for (var match in maskToken.matches) {
          var intMatch = parseInt(match);
          if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {
            var qt = maskToken.matches[match];
            maskToken.matches.splice(match, 1), maskToken.matches.splice(intMatch + 1, 0, qt);
          }
          void 0 !== maskToken.matches[match].matches ? maskToken.matches[match] = reverseTokens(maskToken.matches[match]) : maskToken.matches[match] = reverseStatic(maskToken.matches[match]);
        }
        return maskToken;
      }
      for (var match, m, openingToken, currentOpeningToken, alternator, lastMatch, groupToken, tokenizer = /(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g, escaped = !1, currentToken = new MaskToken(), openenings = [], maskTokens = []; match = tokenizer.exec(mask);) {
        if (m = match[0], escaped) defaultCase();else switch (m.charAt(0)) {
          case opts.escapeChar:
            escaped = !0;
            break;
          case opts.optionalmarker.end:
          case opts.groupmarker.end:
            if (openingToken = openenings.pop(), openingToken.openGroup = !1, void 0 !== openingToken) {
              if (openenings.length > 0) {
                if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(openingToken), currentOpeningToken.isAlternator) {
                  alternator = openenings.pop();
                  for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
                    alternator.matches[mndx].isGroup = !1;
                  }
                  openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
                }
              } else currentToken.matches.push(openingToken);
            } else defaultCase();
            break;
          case opts.optionalmarker.start:
            openenings.push(new MaskToken(!1, !0));
            break;
          case opts.groupmarker.start:
            openenings.push(new MaskToken(!0));
            break;
          case opts.quantifiermarker.start:
            var quantifier = new MaskToken(!1, !1, !0);
            m = m.replace(/[{}]/g, "");
            var mq = m.split(","),
              mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),
              mq1 = 1 === mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
            if ("*" !== mq1 && "+" !== mq1 || (mq0 = "*" === mq1 ? 0 : 1), quantifier.quantifier = {
              min: mq0,
              max: mq1
            }, openenings.length > 0) {
              var matches = openenings[openenings.length - 1].matches;
              match = matches.pop(), match.isGroup || (groupToken = new MaskToken(!0), groupToken.matches.push(match), match = groupToken), matches.push(match), matches.push(quantifier);
            } else match = currentToken.matches.pop(), match.isGroup || (groupToken = new MaskToken(!0), groupToken.matches.push(match), match = groupToken), currentToken.matches.push(match), currentToken.matches.push(quantifier);
            break;
          case opts.alternatormarker:
            openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1], lastMatch = currentOpeningToken.matches.pop()) : lastMatch = currentToken.matches.pop(), lastMatch.isAlternator ? openenings.push(lastMatch) : (alternator = new MaskToken(!1, !1, !1, !0), alternator.matches.push(lastMatch), openenings.push(alternator));
            break;
          default:
            defaultCase();
        }
      }
      for (; openenings.length > 0;) {
        openingToken = openenings.pop(), currentToken.matches.push(openingToken);
      }
      return currentToken.matches.length > 0 && (verifyGroupMarker(currentToken), maskTokens.push(currentToken)), opts.numericInput && reverseTokens(maskTokens[0]), maskTokens;
    }
  }, Inputmask.extendDefaults = function (options) {
    $.extend(!0, Inputmask.prototype.defaults, options);
  }, Inputmask.extendDefinitions = function (definition) {
    $.extend(!0, Inputmask.prototype.defaults.definitions, definition);
  }, Inputmask.extendAliases = function (alias) {
    $.extend(!0, Inputmask.prototype.defaults.aliases, alias);
  }, Inputmask.format = function (value, options, metadata) {
    return Inputmask(options).format(value, metadata);
  }, Inputmask.unmask = function (value, options) {
    return Inputmask(options).unmaskedvalue(value);
  }, Inputmask.isValid = function (value, options) {
    return Inputmask(options).isValid(value);
  }, Inputmask.remove = function (elems) {
    $.each(elems, function (ndx, el) {
      el.inputmask && el.inputmask.remove();
    });
  }, Inputmask.escapeRegex = function (str) {
    var specials = ["/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^"];
    return str.replace(new RegExp("(\\" + specials.join("|\\") + ")", "gim"), "\\$1");
  }, Inputmask.keyCode = {
    ALT: 18,
    BACKSPACE: 8,
    BACKSPACE_SAFARI: 127,
    CAPS_LOCK: 20,
    COMMA: 188,
    COMMAND: 91,
    COMMAND_LEFT: 91,
    COMMAND_RIGHT: 93,
    CONTROL: 17,
    DELETE: 46,
    DOWN: 40,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    HOME: 36,
    INSERT: 45,
    LEFT: 37,
    MENU: 93,
    NUMPAD_ADD: 107,
    NUMPAD_DECIMAL: 110,
    NUMPAD_DIVIDE: 111,
    NUMPAD_ENTER: 108,
    NUMPAD_MULTIPLY: 106,
    NUMPAD_SUBTRACT: 109,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PERIOD: 190,
    RIGHT: 39,
    SHIFT: 16,
    SPACE: 32,
    TAB: 9,
    UP: 38,
    WINDOWS: 91,
    X: 88
  }, window.Inputmask = Inputmask, Inputmask;
}(jQuery), function ($, Inputmask) {
  return void 0 === $.fn.inputmask && ($.fn.inputmask = function (fn, options) {
    var nptmask,
      input = this[0];
    if (void 0 === options && (options = {}), "string" == typeof fn) switch (fn) {
      case "unmaskedvalue":
        return input && input.inputmask ? input.inputmask.unmaskedvalue() : $(input).val();
      case "remove":
        return this.each(function () {
          this.inputmask && this.inputmask.remove();
        });
      case "getemptymask":
        return input && input.inputmask ? input.inputmask.getemptymask() : "";
      case "hasMaskedValue":
        return !(!input || !input.inputmask) && input.inputmask.hasMaskedValue();
      case "isComplete":
        return !input || !input.inputmask || input.inputmask.isComplete();
      case "getmetadata":
        return input && input.inputmask ? input.inputmask.getmetadata() : void 0;
      case "setvalue":
        $(input).val(options), input && void 0 === input.inputmask && $(input).triggerHandler("setvalue");
        break;
      case "option":
        if ("string" != typeof options) return this.each(function () {
          if (void 0 !== this.inputmask) return this.inputmask.option(options);
        });
        if (input && void 0 !== input.inputmask) return input.inputmask.option(options);
        break;
      default:
        return options.alias = fn, nptmask = new Inputmask(options), this.each(function () {
          nptmask.mask(this);
        });
    } else {
      if ("object" == _typeof(fn)) return nptmask = new Inputmask(fn), void 0 === fn.mask && void 0 === fn.alias ? this.each(function () {
        return void 0 !== this.inputmask ? this.inputmask.option(fn) : void nptmask.mask(this);
      }) : this.each(function () {
        nptmask.mask(this);
      });
      if (void 0 === fn) return this.each(function () {
        nptmask = new Inputmask(options), nptmask.mask(this);
      });
    }
  }), $.fn.inputmask;
}(jQuery, Inputmask), function ($, Inputmask) {}(jQuery, Inputmask), function ($, Inputmask) {
  function isLeapYear(year) {
    return isNaN(year) || 29 === new Date(year, 2, 0).getDate();
  }
  return Inputmask.extendAliases({
    "dd/mm/yyyy": {
      mask: "1/2/y",
      placeholder: "dd/mm/yyyy",
      regex: {
        val1pre: new RegExp("[0-3]"),
        val1: new RegExp("0[1-9]|[12][0-9]|3[01]"),
        val2pre: function val2pre(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[1-9]|[12][0-9]|3[01])" + escapedSeparator + "[01])");
        },
        val2: function val2(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[1-9]|[12][0-9])" + escapedSeparator + "(0[1-9]|1[012]))|(30" + escapedSeparator + "(0[13-9]|1[012]))|(31" + escapedSeparator + "(0[13578]|1[02]))");
        }
      },
      leapday: "29/02/",
      separator: "/",
      yearrange: {
        minyear: 1900,
        maxyear: 2099
      },
      isInYearRange: function isInYearRange(chrs, minyear, maxyear) {
        if (isNaN(chrs)) return !1;
        var enteredyear = parseInt(chrs.concat(minyear.toString().slice(chrs.length))),
          enteredyear2 = parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));
        return !isNaN(enteredyear) && minyear <= enteredyear && enteredyear <= maxyear || !isNaN(enteredyear2) && minyear <= enteredyear2 && enteredyear2 <= maxyear;
      },
      determinebaseyear: function determinebaseyear(minyear, maxyear, hint) {
        var currentyear = new Date().getFullYear();
        if (minyear > currentyear) return minyear;
        if (maxyear < currentyear) {
          for (var maxYearPrefix = maxyear.toString().slice(0, 2), maxYearPostfix = maxyear.toString().slice(2, 4); maxyear < maxYearPrefix + hint;) {
            maxYearPrefix--;
          }
          var maxxYear = maxYearPrefix + maxYearPostfix;
          return minyear > maxxYear ? minyear : maxxYear;
        }
        if (minyear <= currentyear && currentyear <= maxyear) {
          for (var currentYearPrefix = currentyear.toString().slice(0, 2); maxyear < currentYearPrefix + hint;) {
            currentYearPrefix--;
          }
          var currentYearAndHint = currentYearPrefix + hint;
          return currentYearAndHint < minyear ? minyear : currentYearAndHint;
        }
        return currentyear;
      },
      onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
        var $input = $(this);
        if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
          var today = new Date();
          $input.val(today.getDate().toString() + (today.getMonth() + 1).toString() + today.getFullYear().toString()), $input.trigger("setvalue");
        }
      },
      getFrontValue: function getFrontValue(mask, buffer, opts) {
        for (var start = 0, length = 0, i = 0; i < mask.length && "2" !== mask.charAt(i); i++) {
          var definition = opts.definitions[mask.charAt(i)];
          definition ? (start += length, length = definition.cardinality) : length++;
        }
        return buffer.join("").substr(start, length);
      },
      postValidation: function postValidation(buffer, currentResult, opts) {
        var dayMonthValue,
          year,
          bufferStr = buffer.join("");
        return 0 === opts.mask.indexOf("y") ? (year = bufferStr.substr(0, 4), dayMonthValue = bufferStr.substr(4, 11)) : (year = bufferStr.substr(6, 11), dayMonthValue = bufferStr.substr(0, 6)), currentResult && (dayMonthValue !== opts.leapday || isLeapYear(year));
      },
      definitions: {
        "1": {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            var isValid = opts.regex.val1.test(chrs);
            return strict || isValid || chrs.charAt(1) !== opts.separator && "-./".indexOf(chrs.charAt(1)) === -1 || !(isValid = opts.regex.val1.test("0" + chrs.charAt(0))) ? isValid : (maskset.buffer[pos - 1] = "0", {
              refreshFromBuffer: {
                start: pos - 1,
                end: pos
              },
              pos: pos,
              c: chrs.charAt(0)
            });
          },
          cardinality: 2,
          prevalidator: [{
            validator: function validator(chrs, maskset, pos, strict, opts) {
              var pchrs = chrs;
              isNaN(maskset.buffer[pos + 1]) || (pchrs += maskset.buffer[pos + 1]);
              var isValid = 1 === pchrs.length ? opts.regex.val1pre.test(pchrs) : opts.regex.val1.test(pchrs);
              if (!strict && !isValid) {
                if (isValid = opts.regex.val1.test(chrs + "0")) return maskset.buffer[pos] = chrs, maskset.buffer[++pos] = "0", {
                  pos: pos,
                  c: "0"
                };
                if (isValid = opts.regex.val1.test("0" + chrs)) return maskset.buffer[pos] = "0", pos++, {
                  pos: pos
                };
              }
              return isValid;
            },
            cardinality: 1
          }]
        },
        "2": {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);
            frontValue.indexOf(opts.placeholder[0]) !== -1 && (frontValue = "01" + opts.separator);
            var isValid = opts.regex.val2(opts.separator).test(frontValue + chrs);
            return strict || isValid || chrs.charAt(1) !== opts.separator && "-./".indexOf(chrs.charAt(1)) === -1 || !(isValid = opts.regex.val2(opts.separator).test(frontValue + "0" + chrs.charAt(0))) ? isValid : (maskset.buffer[pos - 1] = "0", {
              refreshFromBuffer: {
                start: pos - 1,
                end: pos
              },
              pos: pos,
              c: chrs.charAt(0)
            });
          },
          cardinality: 2,
          prevalidator: [{
            validator: function validator(chrs, maskset, pos, strict, opts) {
              isNaN(maskset.buffer[pos + 1]) || (chrs += maskset.buffer[pos + 1]);
              var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);
              frontValue.indexOf(opts.placeholder[0]) !== -1 && (frontValue = "01" + opts.separator);
              var isValid = 1 === chrs.length ? opts.regex.val2pre(opts.separator).test(frontValue + chrs) : opts.regex.val2(opts.separator).test(frontValue + chrs);
              return strict || isValid || !(isValid = opts.regex.val2(opts.separator).test(frontValue + "0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", pos++, {
                pos: pos
              });
            },
            cardinality: 1
          }]
        },
        y: {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
          },
          cardinality: 4,
          prevalidator: [{
            validator: function validator(chrs, maskset, pos, strict, opts) {
              var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
              if (!strict && !isValid) {
                var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + "0").toString().slice(0, 1);
                if (isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), {
                  pos: pos
                };
                if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + "0").toString().slice(0, 2), isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), maskset.buffer[pos++] = yearPrefix.charAt(1), {
                  pos: pos
                };
              }
              return isValid;
            },
            cardinality: 1
          }, {
            validator: function validator(chrs, maskset, pos, strict, opts) {
              var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
              if (!strict && !isValid) {
                var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2);
                if (isValid = opts.isInYearRange(chrs[0] + yearPrefix[1] + chrs[1], opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(1), {
                  pos: pos
                };
                if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2), isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos - 1] = yearPrefix.charAt(0), maskset.buffer[pos++] = yearPrefix.charAt(1), maskset.buffer[pos++] = chrs.charAt(0), {
                  refreshFromBuffer: {
                    start: pos - 3,
                    end: pos
                  },
                  pos: pos
                };
              }
              return isValid;
            },
            cardinality: 2
          }, {
            validator: function validator(chrs, maskset, pos, strict, opts) {
              return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);
            },
            cardinality: 3
          }]
        }
      },
      insertMode: !1,
      autoUnmask: !1
    },
    "mm/dd/yyyy": {
      placeholder: "mm/dd/yyyy",
      alias: "dd/mm/yyyy",
      regex: {
        val2pre: function val2pre(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[13-9]|1[012])" + escapedSeparator + "[0-3])|(02" + escapedSeparator + "[0-2])");
        },
        val2: function val2(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[13-9]|1[012])" + escapedSeparator + "30)|((0[13578]|1[02])" + escapedSeparator + "31)");
        },
        val1pre: new RegExp("[01]"),
        val1: new RegExp("0[1-9]|1[012]")
      },
      leapday: "02/29/",
      onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
        var $input = $(this);
        if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
          var today = new Date();
          $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString()), $input.trigger("setvalue");
        }
      }
    },
    "yyyy/mm/dd": {
      mask: "y/1/2",
      placeholder: "yyyy/mm/dd",
      alias: "mm/dd/yyyy",
      leapday: "/02/29",
      onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
        var $input = $(this);
        if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
          var today = new Date();
          $input.val(today.getFullYear().toString() + (today.getMonth() + 1).toString() + today.getDate().toString()), $input.trigger("setvalue");
        }
      }
    },
    "dd.mm.yyyy": {
      mask: "1.2.y",
      placeholder: "dd.mm.yyyy",
      leapday: "29.02.",
      separator: ".",
      alias: "dd/mm/yyyy"
    },
    "dd-mm-yyyy": {
      mask: "1-2-y",
      placeholder: "dd-mm-yyyy",
      leapday: "29-02-",
      separator: "-",
      alias: "dd/mm/yyyy"
    },
    "mm.dd.yyyy": {
      mask: "1.2.y",
      placeholder: "mm.dd.yyyy",
      leapday: "02.29.",
      separator: ".",
      alias: "mm/dd/yyyy"
    },
    "mm-dd-yyyy": {
      mask: "1-2-y",
      placeholder: "mm-dd-yyyy",
      leapday: "02-29-",
      separator: "-",
      alias: "mm/dd/yyyy"
    },
    "yyyy.mm.dd": {
      mask: "y.1.2",
      placeholder: "yyyy.mm.dd",
      leapday: ".02.29",
      separator: ".",
      alias: "yyyy/mm/dd"
    },
    "yyyy-mm-dd": {
      mask: "y-1-2",
      placeholder: "yyyy-mm-dd",
      leapday: "-02-29",
      separator: "-",
      alias: "yyyy/mm/dd"
    },
    datetime: {
      mask: "1/2/y h:s",
      placeholder: "dd/mm/yyyy hh:mm",
      alias: "dd/mm/yyyy",
      regex: {
        hrspre: new RegExp("[012]"),
        hrs24: new RegExp("2[0-4]|1[3-9]"),
        hrs: new RegExp("[01][0-9]|2[0-4]"),
        ampm: new RegExp("^[a|p|A|P][m|M]"),
        mspre: new RegExp("[0-5]"),
        ms: new RegExp("[0-5][0-9]")
      },
      timeseparator: ":",
      hourFormat: "24",
      definitions: {
        h: {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            if ("24" === opts.hourFormat && 24 === parseInt(chrs, 10)) return maskset.buffer[pos - 1] = "0", maskset.buffer[pos] = "0", {
              refreshFromBuffer: {
                start: pos - 1,
                end: pos
              },
              c: "0"
            };
            var isValid = opts.regex.hrs.test(chrs);
            if (!strict && !isValid && (chrs.charAt(1) === opts.timeseparator || "-.:".indexOf(chrs.charAt(1)) !== -1) && (isValid = opts.regex.hrs.test("0" + chrs.charAt(0)))) return maskset.buffer[pos - 1] = "0", maskset.buffer[pos] = chrs.charAt(0), pos++, {
              refreshFromBuffer: {
                start: pos - 2,
                end: pos
              },
              pos: pos,
              c: opts.timeseparator
            };
            if (isValid && "24" !== opts.hourFormat && opts.regex.hrs24.test(chrs)) {
              var tmp = parseInt(chrs, 10);
              return 24 === tmp ? (maskset.buffer[pos + 5] = "a", maskset.buffer[pos + 6] = "m") : (maskset.buffer[pos + 5] = "p", maskset.buffer[pos + 6] = "m"), tmp -= 12, tmp < 10 ? (maskset.buffer[pos] = tmp.toString(), maskset.buffer[pos - 1] = "0") : (maskset.buffer[pos] = tmp.toString().charAt(1), maskset.buffer[pos - 1] = tmp.toString().charAt(0)), {
                refreshFromBuffer: {
                  start: pos - 1,
                  end: pos + 6
                },
                c: maskset.buffer[pos]
              };
            }
            return isValid;
          },
          cardinality: 2,
          prevalidator: [{
            validator: function validator(chrs, maskset, pos, strict, opts) {
              var isValid = opts.regex.hrspre.test(chrs);
              return strict || isValid || !(isValid = opts.regex.hrs.test("0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", pos++, {
                pos: pos
              });
            },
            cardinality: 1
          }]
        },
        s: {
          validator: "[0-5][0-9]",
          cardinality: 2,
          prevalidator: [{
            validator: function validator(chrs, maskset, pos, strict, opts) {
              var isValid = opts.regex.mspre.test(chrs);
              return strict || isValid || !(isValid = opts.regex.ms.test("0" + chrs)) ? isValid : (maskset.buffer[pos] = "0", pos++, {
                pos: pos
              });
            },
            cardinality: 1
          }]
        },
        t: {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            return opts.regex.ampm.test(chrs + "m");
          },
          casing: "lower",
          cardinality: 1
        }
      },
      insertMode: !1,
      autoUnmask: !1
    },
    datetime12: {
      mask: "1/2/y h:s t\\m",
      placeholder: "dd/mm/yyyy hh:mm xm",
      alias: "datetime",
      hourFormat: "12"
    },
    "mm/dd/yyyy hh:mm xm": {
      mask: "1/2/y h:s t\\m",
      placeholder: "mm/dd/yyyy hh:mm xm",
      alias: "datetime12",
      regex: {
        val2pre: function val2pre(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[13-9]|1[012])" + escapedSeparator + "[0-3])|(02" + escapedSeparator + "[0-2])");
        },
        val2: function val2(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[13-9]|1[012])" + escapedSeparator + "30)|((0[13578]|1[02])" + escapedSeparator + "31)");
        },
        val1pre: new RegExp("[01]"),
        val1: new RegExp("0[1-9]|1[012]")
      },
      leapday: "02/29/",
      onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
        var $input = $(this);
        if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {
          var today = new Date();
          $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString()), $input.trigger("setvalue");
        }
      }
    },
    "hh:mm t": {
      mask: "h:s t\\m",
      placeholder: "hh:mm xm",
      alias: "datetime",
      hourFormat: "12"
    },
    "h:s t": {
      mask: "h:s t\\m",
      placeholder: "hh:mm xm",
      alias: "datetime",
      hourFormat: "12"
    },
    "hh:mm:ss": {
      mask: "h:s:s",
      placeholder: "hh:mm:ss",
      alias: "datetime",
      autoUnmask: !1
    },
    "hh:mm": {
      mask: "h:s",
      placeholder: "hh:mm",
      alias: "datetime",
      autoUnmask: !1
    },
    date: {
      alias: "dd/mm/yyyy"
    },
    "mm/yyyy": {
      mask: "1/y",
      placeholder: "mm/yyyy",
      leapday: "donotuse",
      separator: "/",
      alias: "mm/dd/yyyy"
    },
    shamsi: {
      regex: {
        val2pre: function val2pre(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "[0-3])");
        },
        val2: function val2(separator) {
          var escapedSeparator = Inputmask.escapeRegex.call(this, separator);
          return new RegExp("((0[1-9]|1[012])" + escapedSeparator + "(0[1-9]|[12][0-9]))|((0[1-9]|1[012])" + escapedSeparator + "30)|((0[1-6])" + escapedSeparator + "31)");
        },
        val1pre: new RegExp("[01]"),
        val1: new RegExp("0[1-9]|1[012]")
      },
      yearrange: {
        minyear: 1300,
        maxyear: 1499
      },
      mask: "y/1/2",
      leapday: "/12/30",
      placeholder: "yyyy/mm/dd",
      alias: "mm/dd/yyyy",
      clearIncomplete: !0
    }
  }), Inputmask;
}(jQuery, Inputmask), function ($, Inputmask) {
  return Inputmask.extendDefinitions({
    A: {
      validator: "[A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
      cardinality: 1,
      casing: "upper"
    },
    "&": {
      validator: "[0-9A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
      cardinality: 1,
      casing: "upper"
    },
    "#": {
      validator: "[0-9A-Fa-f]",
      cardinality: 1,
      casing: "upper"
    }
  }), Inputmask.extendAliases({
    url: {
      definitions: {
        i: {
          validator: ".",
          cardinality: 1
        }
      },
      mask: "(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",
      insertMode: !1,
      autoUnmask: !1,
      inputmode: "url"
    },
    ip: {
      mask: "i[i[i]].i[i[i]].i[i[i]].i[i[i]]",
      definitions: {
        i: {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            return pos - 1 > -1 && "." !== maskset.buffer[pos - 1] ? (chrs = maskset.buffer[pos - 1] + chrs, chrs = pos - 2 > -1 && "." !== maskset.buffer[pos - 2] ? maskset.buffer[pos - 2] + chrs : "0" + chrs) : chrs = "00" + chrs, new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs);
          },
          cardinality: 1
        }
      },
      onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
        return maskedValue;
      },
      inputmode: "numeric"
    },
    email: {
      mask: "*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",
      greedy: !1,
      onBeforePaste: function onBeforePaste(pastedValue, opts) {
        return pastedValue = pastedValue.toLowerCase(), pastedValue.replace("mailto:", "");
      },
      definitions: {
        "*": {
          validator: "[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",
          cardinality: 1,
          casing: "lower"
        },
        "-": {
          validator: "[0-9A-Za-z-]",
          cardinality: 1,
          casing: "lower"
        }
      },
      onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
        return maskedValue;
      },
      inputmode: "email"
    },
    mac: {
      mask: "##:##:##:##:##:##"
    },
    vin: {
      mask: "V{13}9{4}",
      definitions: {
        V: {
          validator: "[A-HJ-NPR-Za-hj-npr-z\\d]",
          cardinality: 1,
          casing: "upper"
        }
      },
      clearIncomplete: !0,
      autoUnmask: !0
    }
  }), Inputmask;
}(jQuery, Inputmask), function ($, Inputmask) {
  return Inputmask.extendAliases({
    numeric: {
      mask: function mask(opts) {
        function autoEscape(txt) {
          for (var escapedTxt = "", i = 0; i < txt.length; i++) {
            escapedTxt += opts.definitions[txt.charAt(i)] || opts.optionalmarker.start === txt.charAt(i) || opts.optionalmarker.end === txt.charAt(i) || opts.quantifiermarker.start === txt.charAt(i) || opts.quantifiermarker.end === txt.charAt(i) || opts.groupmarker.start === txt.charAt(i) || opts.groupmarker.end === txt.charAt(i) || opts.alternatormarker === txt.charAt(i) ? "\\" + txt.charAt(i) : txt.charAt(i);
          }
          return escapedTxt;
        }
        if (0 !== opts.repeat && isNaN(opts.integerDigits) && (opts.integerDigits = opts.repeat), opts.repeat = 0, opts.groupSeparator === opts.radixPoint && ("." === opts.radixPoint ? opts.groupSeparator = "," : "," === opts.radixPoint ? opts.groupSeparator = "." : opts.groupSeparator = ""), " " === opts.groupSeparator && (opts.skipOptionalPartCharacter = void 0), opts.autoGroup = opts.autoGroup && "" !== opts.groupSeparator, opts.autoGroup && ("string" == typeof opts.groupSize && isFinite(opts.groupSize) && (opts.groupSize = parseInt(opts.groupSize)), isFinite(opts.integerDigits))) {
          var seps = Math.floor(opts.integerDigits / opts.groupSize),
            mod = opts.integerDigits % opts.groupSize;
          opts.integerDigits = parseInt(opts.integerDigits) + (0 === mod ? seps - 1 : seps), opts.integerDigits < 1 && (opts.integerDigits = "*");
        }
        opts.placeholder.length > 1 && (opts.placeholder = opts.placeholder.charAt(0)), "radixFocus" === opts.positionCaretOnClick && "" === opts.placeholder && opts.integerOptional === !1 && (opts.positionCaretOnClick = "lvp"), opts.definitions[";"] = opts.definitions["~"], opts.definitions[";"].definitionSymbol = "~", opts.numericInput === !0 && (opts.positionCaretOnClick = "radixFocus" === opts.positionCaretOnClick ? "lvp" : opts.positionCaretOnClick, opts.digitsOptional = !1, isNaN(opts.digits) && (opts.digits = 2), opts.decimalProtect = !1);
        var mask = "[+]";
        if (mask += autoEscape(opts.prefix), mask += opts.integerOptional === !0 ? "~{1," + opts.integerDigits + "}" : "~{" + opts.integerDigits + "}", void 0 !== opts.digits) {
          opts.decimalProtect && (opts.radixPointDefinitionSymbol = ":");
          var dq = opts.digits.toString().split(",");
          isFinite(dq[0] && dq[1] && isFinite(dq[1])) ? mask += (opts.decimalProtect ? ":" : opts.radixPoint) + ";{" + opts.digits + "}" : (isNaN(opts.digits) || parseInt(opts.digits) > 0) && (mask += opts.digitsOptional ? "[" + (opts.decimalProtect ? ":" : opts.radixPoint) + ";{1," + opts.digits + "}]" : (opts.decimalProtect ? ":" : opts.radixPoint) + ";{" + opts.digits + "}");
        }
        return mask += autoEscape(opts.suffix), mask += "[-]", opts.greedy = !1, null !== opts.min && (opts.min = opts.min.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), "," === opts.radixPoint && (opts.min = opts.min.replace(opts.radixPoint, "."))), null !== opts.max && (opts.max = opts.max.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), "," === opts.radixPoint && (opts.max = opts.max.replace(opts.radixPoint, "."))), mask;
      },
      placeholder: "",
      greedy: !1,
      digits: "*",
      digitsOptional: !0,
      radixPoint: ".",
      positionCaretOnClick: "radixFocus",
      groupSize: 3,
      groupSeparator: "",
      autoGroup: !1,
      allowPlus: !0,
      allowMinus: !0,
      negationSymbol: {
        front: "-",
        back: ""
      },
      integerDigits: "+",
      integerOptional: !0,
      prefix: "",
      suffix: "",
      rightAlign: !0,
      decimalProtect: !0,
      min: null,
      max: null,
      step: 1,
      insertMode: !0,
      autoUnmask: !1,
      unmaskAsNumber: !1,
      inputmode: "numeric",
      postFormat: function postFormat(buffer, pos, opts) {
        opts.numericInput === !0 && (buffer = buffer.reverse(), isFinite(pos) && (pos = buffer.join("").length - pos - 1));
        var i, l;
        pos = pos >= buffer.length ? buffer.length - 1 : pos < 0 ? 0 : pos;
        var charAtPos = buffer[pos],
          cbuf = buffer.slice();
        charAtPos === opts.groupSeparator && (cbuf.splice(pos--, 1), charAtPos = cbuf[pos]);
        var isNegative = cbuf.join("").match(new RegExp("^" + Inputmask.escapeRegex(opts.negationSymbol.front)));
        isNegative = null !== isNegative && 1 === isNegative.length, pos > (isNegative ? opts.negationSymbol.front.length : 0) + opts.prefix.length && pos < cbuf.length - opts.suffix.length && (cbuf[pos] = "!");
        var bufVal = cbuf.join(""),
          bufValOrigin = cbuf.join();
        if (isNegative && (bufVal = bufVal.replace(new RegExp("^" + Inputmask.escapeRegex(opts.negationSymbol.front)), ""), bufVal = bufVal.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + "$"), "")), bufVal = bufVal.replace(new RegExp(Inputmask.escapeRegex(opts.suffix) + "$"), ""), bufVal = bufVal.replace(new RegExp("^" + Inputmask.escapeRegex(opts.prefix)), ""), bufVal.length > 0 && opts.autoGroup || bufVal.indexOf(opts.groupSeparator) !== -1) {
          var escapedGroupSeparator = Inputmask.escapeRegex(opts.groupSeparator);
          bufVal = bufVal.replace(new RegExp(escapedGroupSeparator, "g"), "");
          var radixSplit = bufVal.split(charAtPos === opts.radixPoint ? "!" : opts.radixPoint);
          if (bufVal = "" === opts.radixPoint ? bufVal : radixSplit[0], charAtPos !== opts.negationSymbol.front && (bufVal = bufVal.replace("!", "?")), bufVal.length > opts.groupSize) for (var reg = new RegExp("([-+]?[\\d?]+)([\\d?]{" + opts.groupSize + "})"); reg.test(bufVal) && "" !== opts.groupSeparator;) {
            bufVal = bufVal.replace(reg, "$1" + opts.groupSeparator + "$2"), bufVal = bufVal.replace(opts.groupSeparator + opts.groupSeparator, opts.groupSeparator);
          }
          bufVal = bufVal.replace("?", "!"), "" !== opts.radixPoint && radixSplit.length > 1 && (bufVal += (charAtPos === opts.radixPoint ? "!" : opts.radixPoint) + radixSplit[1]);
        }
        bufVal = opts.prefix + bufVal + opts.suffix, isNegative && (bufVal = opts.negationSymbol.front + bufVal + opts.negationSymbol.back);
        var needsRefresh = bufValOrigin !== bufVal.split("").join(),
          newPos = $.inArray("!", bufVal);
        if (newPos === -1 && (newPos = pos), needsRefresh) {
          for (buffer.length = bufVal.length, i = 0, l = bufVal.length; i < l; i++) {
            buffer[i] = bufVal.charAt(i);
          }
          buffer[newPos] = charAtPos;
        }
        return newPos = opts.numericInput && isFinite(pos) ? buffer.join("").length - newPos - 1 : newPos, opts.numericInput && (buffer = buffer.reverse(), $.inArray(opts.radixPoint, buffer) < newPos && buffer.join("").length - opts.suffix.length !== newPos && (newPos -= 1)), {
          pos: newPos,
          refreshFromBuffer: needsRefresh,
          buffer: buffer,
          isNegative: isNegative
        };
      },
      onBeforeWrite: function onBeforeWrite(e, buffer, caretPos, opts) {
        var rslt;
        if (e && ("blur" === e.type || "checkval" === e.type || "keydown" === e.type)) {
          var maskedValue = opts.numericInput ? buffer.slice().reverse().join("") : buffer.join(""),
            processValue = maskedValue.replace(opts.prefix, "");
          processValue = processValue.replace(opts.suffix, ""), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), "," === opts.radixPoint && (processValue = processValue.replace(opts.radixPoint, "."));
          var isNegative = processValue.match(new RegExp("[-" + Inputmask.escapeRegex(opts.negationSymbol.front) + "]", "g"));
          if (isNegative = null !== isNegative && 1 === isNegative.length, processValue = processValue.replace(new RegExp("[-" + Inputmask.escapeRegex(opts.negationSymbol.front) + "]", "g"), ""), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + "$"), ""), isNaN(opts.placeholder) && (processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.placeholder), "g"), "")), processValue = processValue === opts.negationSymbol.front ? processValue + "0" : processValue, "" !== processValue && isFinite(processValue)) {
            var floatValue = parseFloat(processValue),
              signedFloatValue = isNegative ? floatValue * -1 : floatValue;
            if (null !== opts.min && isFinite(opts.min) && signedFloatValue < parseFloat(opts.min) ? (floatValue = Math.abs(opts.min), isNegative = opts.min < 0, maskedValue = void 0) : null !== opts.max && isFinite(opts.max) && signedFloatValue > parseFloat(opts.max) && (floatValue = Math.abs(opts.max), isNegative = opts.max < 0, maskedValue = void 0), processValue = floatValue.toString().replace(".", opts.radixPoint).split(""), isFinite(opts.digits)) {
              var radixPosition = $.inArray(opts.radixPoint, processValue),
                rpb = $.inArray(opts.radixPoint, maskedValue);
              radixPosition === -1 && (processValue.push(opts.radixPoint), radixPosition = processValue.length - 1);
              for (var i = 1; i <= opts.digits; i++) {
                opts.digitsOptional || void 0 !== processValue[radixPosition + i] && processValue[radixPosition + i] !== opts.placeholder.charAt(0) ? rpb !== -1 && void 0 !== maskedValue[rpb + i] && (processValue[radixPosition + i] = processValue[radixPosition + i] || maskedValue[rpb + i]) : processValue[radixPosition + i] = "0";
              }
              processValue[processValue.length - 1] === opts.radixPoint && delete processValue[processValue.length - 1];
            }
            if (floatValue.toString() !== processValue && floatValue.toString() + "." !== processValue || isNegative) return processValue = (opts.prefix + processValue.join("")).split(""), !isNegative || 0 === floatValue && "blur" === e.type || (processValue.unshift(opts.negationSymbol.front), processValue.push(opts.negationSymbol.back)), opts.numericInput && (processValue = processValue.reverse()), rslt = opts.postFormat(processValue, opts.numericInput ? caretPos : caretPos - 1, opts), rslt.buffer && (rslt.refreshFromBuffer = rslt.buffer.join("") !== buffer.join("")), rslt;
          }
        }
        if (opts.autoGroup) return rslt = opts.postFormat(buffer, opts.numericInput ? caretPos : caretPos - 1, opts), rslt.caret = caretPos < (rslt.isNegative ? opts.negationSymbol.front.length : 0) + opts.prefix.length || caretPos > rslt.buffer.length - (rslt.isNegative ? opts.negationSymbol.back.length : 0) ? rslt.pos : rslt.pos + 1, rslt;
      },
      regex: {
        integerPart: function integerPart(opts) {
          return new RegExp("[" + Inputmask.escapeRegex(opts.negationSymbol.front) + "+]?\\d+");
        },
        integerNPart: function integerNPart(opts) {
          return new RegExp("[\\d" + Inputmask.escapeRegex(opts.groupSeparator) + Inputmask.escapeRegex(opts.placeholder.charAt(0)) + "]+");
        }
      },
      signHandler: function signHandler(chrs, maskset, pos, strict, opts) {
        if (!strict && opts.allowMinus && "-" === chrs || opts.allowPlus && "+" === chrs) {
          var matchRslt = maskset.buffer.join("").match(opts.regex.integerPart(opts));
          if (matchRslt && matchRslt[0].length > 0) return maskset.buffer[matchRslt.index] === ("-" === chrs ? "+" : opts.negationSymbol.front) ? "-" === chrs ? "" !== opts.negationSymbol.back ? {
            pos: 0,
            c: opts.negationSymbol.front,
            remove: 0,
            caret: pos,
            insert: {
              pos: maskset.buffer.length - 1,
              c: opts.negationSymbol.back
            }
          } : {
            pos: 0,
            c: opts.negationSymbol.front,
            remove: 0,
            caret: pos
          } : "" !== opts.negationSymbol.back ? {
            pos: 0,
            c: "+",
            remove: [0, maskset.buffer.length - 1],
            caret: pos
          } : {
            pos: 0,
            c: "+",
            remove: 0,
            caret: pos
          } : maskset.buffer[0] === ("-" === chrs ? opts.negationSymbol.front : "+") ? "-" === chrs && "" !== opts.negationSymbol.back ? {
            remove: [0, maskset.buffer.length - 1],
            caret: pos - 1
          } : {
            remove: 0,
            caret: pos - 1
          } : "-" === chrs ? "" !== opts.negationSymbol.back ? {
            pos: 0,
            c: opts.negationSymbol.front,
            caret: pos + 1,
            insert: {
              pos: maskset.buffer.length,
              c: opts.negationSymbol.back
            }
          } : {
            pos: 0,
            c: opts.negationSymbol.front,
            caret: pos + 1
          } : {
            pos: 0,
            c: chrs,
            caret: pos + 1
          };
        }
        return !1;
      },
      radixHandler: function radixHandler(chrs, maskset, pos, strict, opts) {
        if (!strict && opts.numericInput !== !0 && chrs === opts.radixPoint && void 0 !== opts.digits && (isNaN(opts.digits) || parseInt(opts.digits) > 0)) {
          var radixPos = $.inArray(opts.radixPoint, maskset.buffer),
            integerValue = maskset.buffer.join("").match(opts.regex.integerPart(opts));
          if (radixPos !== -1 && maskset.validPositions[radixPos]) return maskset.validPositions[radixPos - 1] ? {
            caret: radixPos + 1
          } : {
            pos: integerValue.index,
            c: integerValue[0],
            caret: radixPos + 1
          };
          if (!integerValue || "0" === integerValue[0] && integerValue.index + 1 !== pos) return maskset.buffer[integerValue ? integerValue.index : pos] = "0", {
            pos: (integerValue ? integerValue.index : pos) + 1,
            c: opts.radixPoint
          };
        }
        return !1;
      },
      leadingZeroHandler: function leadingZeroHandler(chrs, maskset, pos, strict, opts, isSelection) {
        if (!strict) {
          var buffer = maskset.buffer.slice("");
          if (buffer.splice(0, opts.prefix.length), buffer.splice(buffer.length - opts.suffix.length, opts.suffix.length), opts.numericInput === !0) {
            var buffer = buffer.reverse(),
              bufferChar = buffer[0];
            if ("0" === bufferChar && void 0 === maskset.validPositions[pos - 1]) return {
              pos: pos,
              remove: buffer.length - 1
            };
          } else {
            pos -= opts.prefix.length;
            var radixPosition = $.inArray(opts.radixPoint, buffer),
              matchRslt = buffer.slice(0, radixPosition !== -1 ? radixPosition : void 0).join("").match(opts.regex.integerNPart(opts));
            if (matchRslt && (radixPosition === -1 || pos <= radixPosition)) {
              var decimalPart = radixPosition === -1 ? 0 : parseInt(buffer.slice(radixPosition + 1).join(""));
              if (0 === matchRslt[0].indexOf("" !== opts.placeholder ? opts.placeholder.charAt(0) : "0") && (matchRslt.index + 1 === pos || isSelection !== !0 && 0 === decimalPart)) return maskset.buffer.splice(matchRslt.index + opts.prefix.length, 1), {
                pos: matchRslt.index + opts.prefix.length,
                remove: matchRslt.index + opts.prefix.length
              };
              if ("0" === chrs && pos <= matchRslt.index && matchRslt[0] !== opts.groupSeparator) return !1;
            }
          }
        }
        return !0;
      },
      definitions: {
        "~": {
          validator: function validator(chrs, maskset, pos, strict, opts, isSelection) {
            var isValid = opts.signHandler(chrs, maskset, pos, strict, opts);
            if (!isValid && (isValid = opts.radixHandler(chrs, maskset, pos, strict, opts), !isValid && (isValid = strict ? new RegExp("[0-9" + Inputmask.escapeRegex(opts.groupSeparator) + "]").test(chrs) : new RegExp("[0-9]").test(chrs), isValid === !0 && (isValid = opts.leadingZeroHandler(chrs, maskset, pos, strict, opts, isSelection), isValid === !0)))) {
              var radixPosition = $.inArray(opts.radixPoint, maskset.buffer);
              isValid = radixPosition !== -1 && (opts.digitsOptional === !1 || maskset.validPositions[pos]) && opts.numericInput !== !0 && pos > radixPosition && !strict ? {
                pos: pos,
                remove: pos
              } : {
                pos: pos
              };
            }
            return isValid;
          },
          cardinality: 1
        },
        "+": {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            var isValid = opts.signHandler(chrs, maskset, pos, strict, opts);
            return !isValid && (strict && opts.allowMinus && chrs === opts.negationSymbol.front || opts.allowMinus && "-" === chrs || opts.allowPlus && "+" === chrs) && (isValid = !(!strict && "-" === chrs) || ("" !== opts.negationSymbol.back ? {
              pos: pos,
              c: "-" === chrs ? opts.negationSymbol.front : "+",
              caret: pos + 1,
              insert: {
                pos: maskset.buffer.length,
                c: opts.negationSymbol.back
              }
            } : {
              pos: pos,
              c: "-" === chrs ? opts.negationSymbol.front : "+",
              caret: pos + 1
            })), isValid;
          },
          cardinality: 1,
          placeholder: ""
        },
        "-": {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            var isValid = opts.signHandler(chrs, maskset, pos, strict, opts);
            return !isValid && strict && opts.allowMinus && chrs === opts.negationSymbol.back && (isValid = !0), isValid;
          },
          cardinality: 1,
          placeholder: ""
        },
        ":": {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            var isValid = opts.signHandler(chrs, maskset, pos, strict, opts);
            if (!isValid) {
              var radix = "[" + Inputmask.escapeRegex(opts.radixPoint) + "]";
              isValid = new RegExp(radix).test(chrs), isValid && maskset.validPositions[pos] && maskset.validPositions[pos].match.placeholder === opts.radixPoint && (isValid = {
                caret: pos + 1
              });
            }
            return isValid;
          },
          cardinality: 1,
          placeholder: function placeholder(opts) {
            return opts.radixPoint;
          }
        }
      },
      onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
        if ("" === unmaskedValue && opts.nullable === !0) return unmaskedValue;
        var processValue = maskedValue.replace(opts.prefix, "");
        return processValue = processValue.replace(opts.suffix, ""), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), opts.unmaskAsNumber ? ("" !== opts.radixPoint && processValue.indexOf(opts.radixPoint) !== -1 && (processValue = processValue.replace(Inputmask.escapeRegex.call(this, opts.radixPoint), ".")), Number(processValue)) : processValue;
      },
      isComplete: function isComplete(buffer, opts) {
        var maskedValue = buffer.join(""),
          bufClone = buffer.slice();
        if (opts.postFormat(bufClone, 0, opts), bufClone.join("") !== maskedValue) return !1;
        var processValue = maskedValue.replace(opts.prefix, "");
        return processValue = processValue.replace(opts.suffix, ""), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), "," === opts.radixPoint && (processValue = processValue.replace(Inputmask.escapeRegex(opts.radixPoint), ".")), isFinite(processValue);
      },
      onBeforeMask: function onBeforeMask(initialValue, opts) {
        if (opts.numericInput === !0 && (initialValue = initialValue.split("").reverse().join("")), "" !== opts.radixPoint && isFinite(initialValue)) {
          var vs = initialValue.split("."),
            groupSize = "" !== opts.groupSeparator ? parseInt(opts.groupSize) : 0;
          2 === vs.length && (vs[0].length > groupSize || vs[1].length > groupSize) && (initialValue = initialValue.toString().replace(".", opts.radixPoint));
        }
        var kommaMatches = initialValue.match(/,/g),
          dotMatches = initialValue.match(/\./g);
        if (dotMatches && kommaMatches ? dotMatches.length > kommaMatches.length ? (initialValue = initialValue.replace(/\./g, ""), initialValue = initialValue.replace(",", opts.radixPoint)) : kommaMatches.length > dotMatches.length ? (initialValue = initialValue.replace(/,/g, ""), initialValue = initialValue.replace(".", opts.radixPoint)) : initialValue = initialValue.indexOf(".") < initialValue.indexOf(",") ? initialValue.replace(/\./g, "") : initialValue = initialValue.replace(/,/g, "") : initialValue = initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), "g"), ""), 0 === opts.digits && (initialValue.indexOf(".") !== -1 ? initialValue = initialValue.substring(0, initialValue.indexOf(".")) : initialValue.indexOf(",") !== -1 && (initialValue = initialValue.substring(0, initialValue.indexOf(",")))), "" !== opts.radixPoint && isFinite(opts.digits) && initialValue.indexOf(opts.radixPoint) !== -1) {
          var valueParts = initialValue.split(opts.radixPoint),
            decPart = valueParts[1].match(new RegExp("\\d*"))[0];
          if (parseInt(opts.digits) < decPart.toString().length) {
            var digitsFactor = Math.pow(10, parseInt(opts.digits));
            initialValue = initialValue.replace(Inputmask.escapeRegex(opts.radixPoint), "."), initialValue = Math.round(parseFloat(initialValue) * digitsFactor) / digitsFactor, initialValue = initialValue.toString().replace(".", opts.radixPoint);
          }
        }
        return opts.numericInput === !0 && (initialValue = initialValue.split("").reverse().join("")), initialValue.toString();
      },
      canClearPosition: function canClearPosition(maskset, position, lvp, strict, opts) {
        var positionInput = maskset.validPositions[position].input,
          canClear = positionInput !== opts.radixPoint || null !== maskset.validPositions[position].match.fn && opts.decimalProtect === !1 || isFinite(positionInput) || position === lvp || positionInput === opts.groupSeparator || positionInput === opts.negationSymbol.front || positionInput === opts.negationSymbol.back;
        return canClear;
      },
      onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
        var $input = $(this);
        if (e.ctrlKey) switch (e.keyCode) {
          case Inputmask.keyCode.UP:
            $input.val(parseFloat(this.inputmask.unmaskedvalue()) + parseInt(opts.step)), $input.trigger("setvalue");
            break;
          case Inputmask.keyCode.DOWN:
            $input.val(parseFloat(this.inputmask.unmaskedvalue()) - parseInt(opts.step)), $input.trigger("setvalue");
        }
      }
    },
    currency: {
      prefix: "$ ",
      groupSeparator: ",",
      alias: "numeric",
      placeholder: "0",
      autoGroup: !0,
      digits: 2,
      digitsOptional: !1,
      clearMaskOnLostFocus: !1
    },
    decimal: {
      alias: "numeric"
    },
    integer: {
      alias: "numeric",
      digits: 0,
      radixPoint: ""
    },
    percentage: {
      alias: "numeric",
      digits: 2,
      radixPoint: ".",
      placeholder: "0",
      autoGroup: !1,
      min: 0,
      max: 100,
      suffix: " %",
      allowPlus: !1,
      allowMinus: !1
    }
  }), Inputmask;
}(jQuery, Inputmask), function ($, Inputmask) {
  function maskSort(a, b) {
    var maska = (a.mask || a).replace(/#/g, "9").replace(/\)/, "9").replace(/[+()#-]/g, ""),
      maskb = (b.mask || b).replace(/#/g, "9").replace(/\)/, "9").replace(/[+()#-]/g, ""),
      maskas = (a.mask || a).split("#")[0],
      maskbs = (b.mask || b).split("#")[0];
    return 0 === maskbs.indexOf(maskas) ? -1 : 0 === maskas.indexOf(maskbs) ? 1 : maska.localeCompare(maskb);
  }
  var analyseMaskBase = Inputmask.prototype.analyseMask;
  return Inputmask.prototype.analyseMask = function (mask, opts) {
    function reduceVariations(masks, previousVariation, previousmaskGroup) {
      previousVariation = previousVariation || "", previousmaskGroup = previousmaskGroup || maskGroups, "" !== previousVariation && (previousmaskGroup[previousVariation] = {});
      for (var variation = "", maskGroup = previousmaskGroup[previousVariation] || previousmaskGroup, i = masks.length - 1; i >= 0; i--) {
        mask = masks[i].mask || masks[i], variation = mask.substr(0, 1), maskGroup[variation] = maskGroup[variation] || [], maskGroup[variation].unshift(mask.substr(1)), masks.splice(i, 1);
      }
      for (var ndx in maskGroup) {
        maskGroup[ndx].length > 500 && reduceVariations(maskGroup[ndx].slice(), ndx, maskGroup);
      }
    }
    function rebuild(maskGroup) {
      var mask = "",
        submasks = [];
      for (var ndx in maskGroup) {
        $.isArray(maskGroup[ndx]) ? 1 === maskGroup[ndx].length ? submasks.push(ndx + maskGroup[ndx]) : submasks.push(ndx + opts.groupmarker.start + maskGroup[ndx].join(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start) + opts.groupmarker.end) : submasks.push(ndx + rebuild(maskGroup[ndx]));
      }
      return mask += 1 === submasks.length ? submasks[0] : opts.groupmarker.start + submasks.join(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start) + opts.groupmarker.end;
    }
    var maskGroups = {};
    opts.phoneCodes && opts.phoneCodes.length > 1e3 && (mask = mask.substr(1, mask.length - 2), reduceVariations(mask.split(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start)), mask = rebuild(maskGroups));
    var mt = analyseMaskBase.call(this, mask, opts);
    return mt;
  }, Inputmask.extendAliases({
    abstractphone: {
      groupmarker: {
        start: "<",
        end: ">"
      },
      countrycode: "",
      phoneCodes: [],
      mask: function mask(opts) {
        return opts.definitions = {
          "#": opts.definitions[9]
        }, opts.phoneCodes.sort(maskSort);
      },
      keepStatic: !0,
      onBeforeMask: function onBeforeMask(value, opts) {
        var processedValue = value.replace(/^0{1,2}/, "").replace(/[\s]/g, "");
        return (processedValue.indexOf(opts.countrycode) > 1 || processedValue.indexOf(opts.countrycode) === -1) && (processedValue = "+" + opts.countrycode + processedValue), processedValue;
      },
      onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
        return unmaskedValue;
      },
      inputmode: "tel"
    }
  }), Inputmask;
}(jQuery, Inputmask), function ($, Inputmask) {
  return Inputmask.extendAliases({
    Regex: {
      mask: "r",
      greedy: !1,
      repeat: "*",
      regex: null,
      regexTokens: null,
      tokenizer: /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,
      quantifierFilter: /[0-9]+[^,]/,
      isComplete: function isComplete(buffer, opts) {
        return new RegExp(opts.regex).test(buffer.join(""));
      },
      definitions: {
        r: {
          validator: function validator(chrs, maskset, pos, strict, opts) {
            function RegexToken(isGroup, isQuantifier) {
              this.matches = [], this.isGroup = isGroup || !1, this.isQuantifier = isQuantifier || !1, this.quantifier = {
                min: 1,
                max: 1
              }, this.repeaterPart = void 0;
            }
            function analyseRegex() {
              var match,
                m,
                currentToken = new RegexToken(),
                opengroups = [];
              for (opts.regexTokens = []; match = opts.tokenizer.exec(opts.regex);) {
                switch (m = match[0], m.charAt(0)) {
                  case "(":
                    opengroups.push(new RegexToken(!0));
                    break;
                  case ")":
                    groupToken = opengroups.pop(), opengroups.length > 0 ? opengroups[opengroups.length - 1].matches.push(groupToken) : currentToken.matches.push(groupToken);
                    break;
                  case "{":
                  case "+":
                  case "*":
                    var quantifierToken = new RegexToken(!1, !0);
                    m = m.replace(/[{}]/g, "");
                    var mq = m.split(","),
                      mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),
                      mq1 = 1 === mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
                    if (quantifierToken.quantifier = {
                      min: mq0,
                      max: mq1
                    }, opengroups.length > 0) {
                      var matches = opengroups[opengroups.length - 1].matches;
                      match = matches.pop(), match.isGroup || (groupToken = new RegexToken(!0), groupToken.matches.push(match), match = groupToken), matches.push(match), matches.push(quantifierToken);
                    } else match = currentToken.matches.pop(), match.isGroup || (groupToken = new RegexToken(!0), groupToken.matches.push(match), match = groupToken), currentToken.matches.push(match), currentToken.matches.push(quantifierToken);
                    break;
                  default:
                    opengroups.length > 0 ? opengroups[opengroups.length - 1].matches.push(m) : currentToken.matches.push(m);
                }
              }
              currentToken.matches.length > 0 && opts.regexTokens.push(currentToken);
            }
            function validateRegexToken(token, fromGroup) {
              var isvalid = !1;
              fromGroup && (regexPart += "(", openGroupCount++);
              for (var mndx = 0; mndx < token.matches.length; mndx++) {
                var matchToken = token.matches[mndx];
                if (matchToken.isGroup === !0) isvalid = validateRegexToken(matchToken, !0);else if (matchToken.isQuantifier === !0) {
                  var crrntndx = $.inArray(matchToken, token.matches),
                    matchGroup = token.matches[crrntndx - 1],
                    regexPartBak = regexPart;
                  if (isNaN(matchToken.quantifier.max)) {
                    for (; matchToken.repeaterPart && matchToken.repeaterPart !== regexPart && matchToken.repeaterPart.length > regexPart.length && !(isvalid = validateRegexToken(matchGroup, !0));) {
                      ;
                    }
                    isvalid = isvalid || validateRegexToken(matchGroup, !0), isvalid && (matchToken.repeaterPart = regexPart), regexPart = regexPartBak + matchToken.quantifier.max;
                  } else {
                    for (var i = 0, qm = matchToken.quantifier.max - 1; i < qm && !(isvalid = validateRegexToken(matchGroup, !0)); i++) {
                      ;
                    }
                    regexPart = regexPartBak + "{" + matchToken.quantifier.min + "," + matchToken.quantifier.max + "}";
                  }
                } else if (void 0 !== matchToken.matches) for (var k = 0; k < matchToken.length && !(isvalid = validateRegexToken(matchToken[k], fromGroup)); k++) {
                  ;
                } else {
                  var testExp;
                  if ("[" == matchToken.charAt(0)) {
                    testExp = regexPart, testExp += matchToken;
                    for (var j = 0; j < openGroupCount; j++) {
                      testExp += ")";
                    }
                    var exp = new RegExp("^(" + testExp + ")$");
                    isvalid = exp.test(bufferStr);
                  } else for (var l = 0, tl = matchToken.length; l < tl; l++) {
                    if ("\\" !== matchToken.charAt(l)) {
                      testExp = regexPart, testExp += matchToken.substr(0, l + 1), testExp = testExp.replace(/\|$/, "");
                      for (var j = 0; j < openGroupCount; j++) {
                        testExp += ")";
                      }
                      var exp = new RegExp("^(" + testExp + ")$");
                      if (isvalid = exp.test(bufferStr)) break;
                    }
                  }
                  regexPart += matchToken;
                }
                if (isvalid) break;
              }
              return fromGroup && (regexPart += ")", openGroupCount--), isvalid;
            }
            var bufferStr,
              groupToken,
              cbuffer = maskset.buffer.slice(),
              regexPart = "",
              isValid = !1,
              openGroupCount = 0;
            null === opts.regexTokens && analyseRegex(), cbuffer.splice(pos, 0, chrs), bufferStr = cbuffer.join("");
            for (var i = 0; i < opts.regexTokens.length; i++) {
              var regexToken = opts.regexTokens[i];
              if (isValid = validateRegexToken(regexToken, regexToken.isGroup)) break;
            }
            return isValid;
          },
          cardinality: 1
        }
      }
    }
  }), Inputmask;
}(jQuery, Inputmask);

/***/ }),

/***/ "./assets/js/owl.carousel.min.js":
/*!***************************************!*\
  !*** ./assets/js/owl.carousel.min.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");
__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
__webpack_require__(/*! core-js/modules/es.regexp.dot-all.js */ "./node_modules/core-js/modules/es.regexp.dot-all.js");
__webpack_require__(/*! core-js/modules/es.regexp.sticky.js */ "./node_modules/core-js/modules/es.regexp.sticky.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/es.object.get-own-property-names.js */ "./node_modules/core-js/modules/es.object.get-own-property-names.js");
__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
__webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
__webpack_require__(/*! core-js/modules/es.error.to-string.js */ "./node_modules/core-js/modules/es.error.to-string.js");
__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/**
 * Owl Carousel v2.2.1
 * Copyright 2013-2017 David Deutsch
 * Licensed under  ()
 */
!function (a, b, c, d) {
  function e(b, c) {
    this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = {
      time: null,
      target: null,
      pointer: null,
      stage: {
        start: null,
        current: null
      },
      direction: null
    }, this._states = {
      current: {},
      tags: {
        initializing: ["busy"],
        animating: ["busy"],
        dragging: ["interacting"]
      }
    }, a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) {
      this._handlers[c] = a.proxy(this[c], this);
    }, this)), a.each(e.Plugins, a.proxy(function (a, b) {
      this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);
    }, this)), a.each(e.Workers, a.proxy(function (b, c) {
      this._pipe.push({
        filter: c.filter,
        run: a.proxy(c.run, this)
      });
    }, this)), this.setup(), this.initialize();
  }
  e.Defaults = {
    items: 3,
    loop: !1,
    center: !1,
    rewind: !1,
    mouseDrag: !0,
    touchDrag: !0,
    pullDrag: !0,
    freeDrag: !1,
    margin: 0,
    stagePadding: 0,
    merge: !1,
    mergeFit: !0,
    autoWidth: !1,
    startPosition: 0,
    rtl: !1,
    smartSpeed: 250,
    fluidSpeed: !1,
    dragEndSpeed: !1,
    responsive: {},
    responsiveRefreshRate: 200,
    responsiveBaseElement: b,
    fallbackEasing: "swing",
    info: !1,
    nestedItemSelector: !1,
    itemElement: "div",
    stageElement: "div",
    refreshClass: "owl-refresh",
    loadedClass: "owl-loaded",
    loadingClass: "owl-loading",
    rtlClass: "owl-rtl",
    responsiveClass: "owl-responsive",
    dragClass: "owl-drag",
    itemClass: "owl-item",
    stageClass: "owl-stage",
    stageOuterClass: "owl-stage-outer",
    grabClass: "owl-grab"
  }, e.Width = {
    Default: "default",
    Inner: "inner",
    Outer: "outer"
  }, e.Type = {
    Event: "event",
    State: "state"
  }, e.Plugins = {}, e.Workers = [{
    filter: ["width", "settings"],
    run: function run() {
      this._width = this.$element.width();
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      a.current = this._items && this._items[this.relative(this._current)];
    }
  }, {
    filter: ["items", "settings"],
    run: function run() {
      this.$stage.children(".cloned").remove();
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      var b = this.settings.margin || "",
        c = !this.settings.autoWidth,
        d = this.settings.rtl,
        e = {
          width: "auto",
          "margin-left": d ? b : "",
          "margin-right": d ? "" : b
        };
      !c && this.$stage.children().css(e), a.css = e;
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
        c = null,
        d = this._items.length,
        e = !this.settings.autoWidth,
        f = [];
      for (a.items = {
        merge: !1,
        width: b
      }; d--;) {
        c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();
      }
      this._widths = f;
    }
  }, {
    filter: ["items", "settings"],
    run: function run() {
      var b = [],
        c = this._items,
        d = this.settings,
        e = Math.max(2 * d.items, 4),
        f = 2 * Math.ceil(c.length / 2),
        g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,
        h = "",
        i = "";
      for (g /= 2; g--;) {
        b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i;
      }
      this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage);
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run() {
      for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) {
        d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);
      }
      this._coordinates = f;
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run() {
      var a = this.settings.stagePadding,
        b = this._coordinates,
        c = {
          width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a,
          "padding-left": a || "",
          "padding-right": a || ""
        };
      this.$stage.css(c);
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      var b = this._coordinates.length,
        c = !this.settings.autoWidth,
        d = this.$stage.children();
      if (c && a.items.merge) for (; b--;) {
        a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);
      } else c && (a.css.width = a.items.width, d.css(a.css));
    }
  }, {
    filter: ["items"],
    run: function run() {
      this._coordinates.length < 1 && this.$stage.removeAttr("style");
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current);
    }
  }, {
    filter: ["position"],
    run: function run() {
      this.animate(this.coordinates(this._current));
    }
  }, {
    filter: ["width", "position", "items", "settings"],
    run: function run() {
      var a,
        b,
        c,
        d,
        e = this.settings.rtl ? 1 : -1,
        f = 2 * this.settings.stagePadding,
        g = this.coordinates(this.current()) + f,
        h = g + this.width() * e,
        i = [];
      for (c = 0, d = this._coordinates.length; c < d; c++) {
        a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c);
      }
      this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.settings.center && (this.$stage.children(".center").removeClass("center"), this.$stage.children().eq(this.current()).addClass("center"));
    }
  }], e.prototype.initialize = function () {
    if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) {
      var b, c, e;
      b = this.$element.find("img"), c = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, e = this.$element.children(c).width(), b.length && e <= 0 && this.preloadAutoWidthImages(b);
    }
    this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ' class="' + this.settings.stageClass + '"/>').wrap('<div class="' + this.settings.stageOuterClass + '"/>'), this.$element.append(this.$stage.parent()), this.replace(this.$element.children().not(this.$stage.parent())), this.$element.is(":visible") ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized");
  }, e.prototype.setup = function () {
    var b = this.viewport(),
      c = this.options.responsive,
      d = -1,
      e = null;
    c ? (a.each(c, function (a) {
      a <= b && a > d && (d = Number(a));
    }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", {
      property: {
        name: "settings",
        value: e
      }
    }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", {
      property: {
        name: "settings",
        value: this.settings
      }
    });
  }, e.prototype.optionsLogic = function () {
    this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);
  }, e.prototype.prepare = function (b) {
    var c = this.trigger("prepare", {
      content: b
    });
    return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", {
      content: c.data
    }), c.data;
  }, e.prototype.update = function () {
    for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {
        return this[a];
      }, this._invalidated), e = {}; b < c;) {
      (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;
    }
    this._invalidated = {}, !this.is("valid") && this.enter("valid");
  }, e.prototype.width = function (a) {
    switch (a = a || e.Width.Default) {
      case e.Width.Inner:
      case e.Width.Outer:
        return this._width;
      default:
        return this._width - 2 * this.settings.stagePadding + this.settings.margin;
    }
  }, e.prototype.refresh = function () {
    this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed");
  }, e.prototype.onThrottledResize = function () {
    b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
  }, e.prototype.onResize = function () {
    return !!this._items.length && this._width !== this.$element.width() && !!this.$element.is(":visible") && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized")));
  }, e.prototype.registerEventHandlers = function () {
    a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), this.settings.responsive !== !1 && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function () {
      return !1;
    })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this)));
  }, e.prototype.onDragStart = function (b) {
    var d = null;
    3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = {
      x: d[16 === d.length ? 12 : 4],
      y: d[16 === d.length ? 13 : 5]
    }) : (d = this.$stage.position(), d = {
      x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left,
      y: d.top
    }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) {
      var d = this.difference(this._drag.pointer, this.pointer(b));
      a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag"));
    }, this)));
  }, e.prototype.onDragMove = function (a) {
    var b = null,
      c = null,
      d = null,
      e = this.difference(this._drag.pointer, this.pointer(a)),
      f = this.difference(this._drag.stage.start, e);
    this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x));
  }, e.prototype.onDragEnd = function (b) {
    var d = this.difference(this._drag.pointer, this.pointer(b)),
      e = this._drag.stage.current,
      f = d.x > 0 ^ this.settings.rtl ? "left" : "right";
    a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function () {
      return !1;
    })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"));
  }, e.prototype.closest = function (b, c) {
    var d = -1,
      e = 30,
      f = this.width(),
      g = this.coordinates();
    return this.settings.freeDrag || a.each(g, a.proxy(function (a, h) {
      return "left" === c && b > h - e && b < h + e ? d = a : "right" === c && b > h - f - e && b < h - f + e ? d = a + 1 : this.op(b, "<", h) && this.op(b, ">", g[a + 1] || h - f) && (d = "left" === c ? a + 1 : a), d === -1;
    }, this)), this.settings.loop || (this.op(b, ">", g[this.minimum()]) ? d = b = this.minimum() : this.op(b, "<", g[this.maximum()]) && (d = b = this.maximum())), d;
  }, e.prototype.animate = function (b) {
    var c = this.speed() > 0;
    this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({
      transform: "translate3d(" + b + "px,0px,0px)",
      transition: this.speed() / 1e3 + "s"
    }) : c ? this.$stage.animate({
      left: b + "px"
    }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({
      left: b + "px"
    });
  }, e.prototype.is = function (a) {
    return this._states.current[a] && this._states.current[a] > 0;
  }, e.prototype.current = function (a) {
    if (a === d) return this._current;
    if (0 === this._items.length) return d;
    if (a = this.normalize(a), this._current !== a) {
      var b = this.trigger("change", {
        property: {
          name: "position",
          value: a
        }
      });
      b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", {
        property: {
          name: "position",
          value: this._current
        }
      });
    }
    return this._current;
  }, e.prototype.invalidate = function (b) {
    return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function (a, b) {
      return b;
    });
  }, e.prototype.reset = function (a) {
    a = this.normalize(a), a !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"]));
  }, e.prototype.normalize = function (a, b) {
    var c = this._items.length,
      e = b ? 0 : this._clones.length;
    return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a;
  }, e.prototype.relative = function (a) {
    return a -= this._clones.length / 2, this.normalize(a, !0);
  }, e.prototype.maximum = function (a) {
    var b,
      c,
      d,
      e = this.settings,
      f = this._coordinates.length;
    if (e.loop) f = this._clones.length / 2 + this._items.length - 1;else if (e.autoWidth || e.merge) {
      for (b = this._items.length, c = this._items[--b].width(), d = this.$element.width(); b-- && (c += this._items[b].width() + this.settings.margin, !(c > d));) {
        ;
      }
      f = b + 1;
    } else f = e.center ? this._items.length - 1 : this._items.length - e.items;
    return a && (f -= this._clones.length / 2), Math.max(f, 0);
  }, e.prototype.minimum = function (a) {
    return a ? 0 : this._clones.length / 2;
  }, e.prototype.items = function (a) {
    return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]);
  }, e.prototype.mergers = function (a) {
    return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]);
  }, e.prototype.clones = function (b) {
    var c = this._clones.length / 2,
      e = c + this._items.length,
      f = function f(a) {
        return a % 2 === 0 ? e + a / 2 : c - (a + 1) / 2;
      };
    return b === d ? a.map(this._clones, function (a, b) {
      return f(b);
    }) : a.map(this._clones, function (a, c) {
      return a === b ? f(c) : null;
    });
  }, e.prototype.speed = function (a) {
    return a !== d && (this._speed = a), this._speed;
  }, e.prototype.coordinates = function (b) {
    var c,
      e = 1,
      f = b - 1;
    return b === d ? a.map(this._coordinates, a.proxy(function (a, b) {
      return this.coordinates(b);
    }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c));
  }, e.prototype.duration = function (a, b, c) {
    return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);
  }, e.prototype.to = function (a, b) {
    var c = this.current(),
      d = null,
      e = a - this.relative(c),
      f = (e > 0) - (e < 0),
      g = this._items.length,
      h = this.minimum(),
      i = this.maximum();
    this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += f * -1 * g), a = c + e, d = ((a - h) % g + g) % g + h, d !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.$element.is(":visible") && this.update();
  }, e.prototype.next = function (a) {
    a = a || !1, this.to(this.relative(this.current()) + 1, a);
  }, e.prototype.prev = function (a) {
    a = a || !1, this.to(this.relative(this.current()) - 1, a);
  }, e.prototype.onTransitionEnd = function (a) {
    if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1;
    this.leave("animating"), this.trigger("translated");
  }, e.prototype.viewport = function () {
    var d;
    return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn("Can not detect viewport width."), d;
  }, e.prototype.replace = function (b) {
    this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function () {
      return 1 === this.nodeType;
    }).each(a.proxy(function (a, b) {
      b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1);
    }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items");
  }, e.prototype.add = function (b, c) {
    var e = this.relative(this._current);
    c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", {
      content: b,
      position: c
    }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", {
      content: b,
      position: c
    });
  }, e.prototype.remove = function (a) {
    a = this.normalize(a, !0), a !== d && (this.trigger("remove", {
      content: this._items[a],
      position: a
    }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", {
      content: null,
      position: a
    }));
  }, e.prototype.preloadAutoWidthImages = function (b) {
    b.each(a.proxy(function (b, c) {
      this.enter("pre-loading"), c = a(c), a(new Image()).one("load", a.proxy(function (a) {
        c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh();
      }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"));
    }, this));
  }, e.prototype.destroy = function () {
    this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), this.settings.responsive !== !1 && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize));
    for (var d in this._plugins) {
      this._plugins[d].destroy();
    }
    this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
  }, e.prototype.op = function (a, b, c) {
    var d = this.settings.rtl;
    switch (b) {
      case "<":
        return d ? a > c : a < c;
      case ">":
        return d ? a < c : a > c;
      case ">=":
        return d ? a <= c : a >= c;
      case "<=":
        return d ? a >= c : a <= c;
    }
  }, e.prototype.on = function (a, b, c, d) {
    a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c);
  }, e.prototype.off = function (a, b, c, d) {
    a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c);
  }, e.prototype.trigger = function (b, c, d, f, g) {
    var h = {
        item: {
          count: this._items.length,
          index: this.current()
        }
      },
      i = a.camelCase(a.grep(["on", b, d], function (a) {
        return a;
      }).join("-").toLowerCase()),
      j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({
        relatedTarget: this
      }, h, c));
    return this._supress[b] || (a.each(this._plugins, function (a, b) {
      b.onTrigger && b.onTrigger(j);
    }), this.register({
      type: e.Type.Event,
      name: b
    }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j;
  }, e.prototype.enter = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++;
    }, this));
  }, e.prototype.leave = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b]--;
    }, this));
  }, e.prototype.register = function (b) {
    if (b.type === e.Type.Event) {
      if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {
        var c = a.event.special[b.name]._default;
        a.event.special[b.name]._default = function (a) {
          return !c || !c.apply || a.namespace && a.namespace.indexOf("owl") !== -1 ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments);
        }, a.event.special[b.name].owl = !0;
      }
    } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {
      return a.inArray(c, this._states.tags[b.name]) === d;
    }, this)));
  }, e.prototype.suppress = function (b) {
    a.each(b, a.proxy(function (a, b) {
      this._supress[b] = !0;
    }, this));
  }, e.prototype.release = function (b) {
    a.each(b, a.proxy(function (a, b) {
      delete this._supress[b];
    }, this));
  }, e.prototype.pointer = function (a) {
    var c = {
      x: null,
      y: null
    };
    return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c;
  }, e.prototype.isNumeric = function (a) {
    return !isNaN(parseFloat(a));
  }, e.prototype.difference = function (a, b) {
    return {
      x: a.x - b.x,
      y: a.y - b.y
    };
  }, a.fn.owlCarousel = function (b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return this.each(function () {
      var d = a(this),
        f = d.data("owl.carousel");
      f || (f = new e(this, "object" == _typeof(b) && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) {
        f.register({
          type: e.Type.Event,
          name: c
        }), f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) {
          a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]));
        }, f));
      })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c);
    });
  }, a.fn.owlCarousel.Constructor = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._interval = null, this._visible = null, this._handlers = {
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoRefresh && this.watch();
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };
  e.Defaults = {
    autoRefresh: !0,
    autoRefreshInterval: 500
  }, e.prototype.watch = function () {
    this._interval || (this._visible = this._core.$element.is(":visible"), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));
  }, e.prototype.refresh = function () {
    this._core.$element.is(":visible") !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh());
  }, e.prototype.destroy = function () {
    var a, c;
    b.clearInterval(this._interval);
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._loaded = [], this._handlers = {
      "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) {
        if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) for (var c = this._core.settings, e = c.center && Math.ceil(c.items / 2) || c.items, f = c.center && e * -1 || 0, g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f, h = this._core.clones().length, i = a.proxy(function (a, b) {
            this.load(b);
          }, this); f++ < e;) {
          this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++;
        }
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };
  e.Defaults = {
    lazyLoad: !1
  }, e.prototype.load = function (c) {
    var d = this._core.$stage.children().eq(c),
      e = d && d.find(".owl-lazy");
    !e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) {
      var e,
        f = a(d),
        g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src");
      this._core.trigger("load", {
        element: f,
        url: g
      }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function () {
        f.css("opacity", 1), this._core.trigger("loaded", {
          element: f,
          url: g
        }, "lazy");
      }, this)).attr("src", g) : (e = new Image(), e.onload = a.proxy(function () {
        f.css({
          "background-image": 'url("' + g + '")',
          opacity: "1"
        }), this._core.trigger("loaded", {
          element: f,
          url: g
        }, "lazy");
      }, this), e.src = g);
    }, this)), this._loaded.push(d.get(0)));
  }, e.prototype.destroy = function () {
    var a, b;
    for (a in this.handlers) {
      this._core.$element.off(a, this.handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._handlers = {
      "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && this.update();
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && "position" == a.property.name && this.update();
      }, this),
      "loaded.owl.lazy": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update();
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };
  e.Defaults = {
    autoHeight: !1,
    autoHeightClass: "owl-height"
  }, e.prototype.update = function () {
    var b = this._core._current,
      c = b + this._core.settings.items,
      d = this._core.$stage.children().toArray().slice(b, c),
      e = [],
      f = 0;
    a.each(d, function (b, c) {
      e.push(a(c).height());
    }), f = Math.max.apply(null, e), this._core.$stage.parent().height(f).addClass(this._core.settings.autoHeightClass);
  }, e.prototype.destroy = function () {
    var a, b;
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._videos = {}, this._playing = null, this._handlers = {
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.register({
          type: "state",
          name: "playing",
          tags: ["interacting"]
        });
      }, this),
      "resize.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault();
      }, this),
      "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove();
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" === a.property.name && this._playing && this.stop();
      }, this),
      "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find(".owl-video");
          c.length && (c.css("display", "none"), this.fetch(c, a(b.content)));
        }
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) {
      this.play(a);
    }, this));
  };
  e.Defaults = {
    video: !1,
    videoHeight: !1,
    videoWidth: !1
  }, e.prototype.fetch = function (a, b) {
    var c = function () {
        return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube";
      }(),
      d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"),
      e = a.attr("data-width") || this._core.settings.videoWidth,
      f = a.attr("data-height") || this._core.settings.videoHeight,
      g = a.attr("href");
    if (!g) throw new Error("Missing video URL.");
    if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube";else if (d[3].indexOf("vimeo") > -1) c = "vimeo";else {
      if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");
      c = "vzaar";
    }
    d = d[6], this._videos[g] = {
      type: c,
      id: d,
      width: e,
      height: f
    }, b.attr("data-video", g), this.thumbnail(a, this._videos[g]);
  }, e.prototype.thumbnail = function (b, c) {
    var d,
      e,
      f,
      g = c.width && c.height ? 'style="width:' + c.width + "px;height:" + c.height + 'px;"' : "",
      h = b.find("img"),
      i = "src",
      j = "",
      k = this._core.settings,
      l = function l(a) {
        e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? '<div class="owl-video-tn ' + j + '" ' + i + '="' + a + '"></div>' : '<div class="owl-video-tn" style="opacity:1;background-image:url(' + a + ')"></div>', b.after(d), b.after(e);
      };
    if (b.wrap('<div class="owl-video-wrapper"' + g + "></div>"), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length) return l(h.attr(i)), h.remove(), !1;
    "youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({
      type: "GET",
      url: "//vimeo.com/api/v2/video/" + c.id + ".json",
      jsonp: "callback",
      dataType: "jsonp",
      success: function success(a) {
        f = a[0].thumbnail_large, l(f);
      }
    }) : "vzaar" === c.type && a.ajax({
      type: "GET",
      url: "//vzaar.com/api/videos/" + c.id + ".json",
      jsonp: "callback",
      dataType: "jsonp",
      success: function success(a) {
        f = a.framegrab_url, l(f);
      }
    });
  }, e.prototype.stop = function () {
    this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video");
  }, e.prototype.play = function (b) {
    var c,
      d = a(b.target),
      e = d.closest("." + this._core.settings.itemClass),
      f = this._videos[e.attr("data-video")],
      g = f.width || "100%",
      h = f.height || this._core.$stage.height();
    this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), "youtube" === f.type ? c = '<iframe width="' + g + '" height="' + h + '" src="//www.youtube.com/embed/' + f.id + "?autoplay=1&rel=0&v=" + f.id + '" frameborder="0" allowfullscreen></iframe>' : "vimeo" === f.type ? c = '<iframe src="//player.vimeo.com/video/' + f.id + '?autoplay=1" width="' + g + '" height="' + h + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>' : "vzaar" === f.type && (c = '<iframe frameborder="0"height="' + h + '"width="' + g + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/' + f.id + '/player?autoplay=true"></iframe>'), a('<div class="owl-video-frame">' + c + "</div>").insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing"));
  }, e.prototype.isInFullScreen = function () {
    var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;
    return b && a(b).parent().hasClass("owl-video-frame");
  }, e.prototype.destroy = function () {
    var a, b;
    this._core.$element.off("click.owl.video");
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Video = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = {
      "change.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value);
      }, this),
      "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) {
        a.namespace && (this.swapping = "translated" == a.type);
      }, this),
      "translate.owl.carousel": a.proxy(function (a) {
        a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();
      }, this)
    }, this.core.$element.on(this.handlers);
  };
  e.Defaults = {
    animateOut: !1,
    animateIn: !1
  }, e.prototype.swap = function () {
    if (1 === this.core.settings.items && a.support.animation && a.support.transition) {
      this.core.speed(0);
      var b,
        c = a.proxy(this.clear, this),
        d = this.core.$stage.children().eq(this.previous),
        e = this.core.$stage.children().eq(this.next),
        f = this.core.settings.animateIn,
        g = this.core.settings.animateOut;
      this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({
        left: b + "px"
      }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f));
    }
  }, e.prototype.clear = function (b) {
    a(b.target).css({
      left: ""
    }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd();
  }, e.prototype.destroy = function () {
    var a, b;
    for (a in this.handlers) {
      this.core.$element.off(a, this.handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Animate = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._timeout = null, this._paused = !1, this._handlers = {
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._core.settings.autoplay && this._setAutoPlayInterval();
      }, this),
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoplay && this.play();
      }, this),
      "play.owl.autoplay": a.proxy(function (a, b, c) {
        a.namespace && this.play(b, c);
      }, this),
      "stop.owl.autoplay": a.proxy(function (a) {
        a.namespace && this.stop();
      }, this),
      "mouseover.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this),
      "mouseleave.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play();
      }, this),
      "touchstart.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this),
      "touchend.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this.play();
      }, this)
    }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options);
  };
  e.Defaults = {
    autoplay: !1,
    autoplayTimeout: 5e3,
    autoplayHoverPause: !1,
    autoplaySpeed: !1
  }, e.prototype.play = function (a, b) {
    this._paused = !1, this._core.is("rotating") || (this._core.enter("rotating"), this._setAutoPlayInterval());
  }, e.prototype._getNextTimeout = function (d, e) {
    return this._timeout && b.clearTimeout(this._timeout), b.setTimeout(a.proxy(function () {
      this._paused || this._core.is("busy") || this._core.is("interacting") || c.hidden || this._core.next(e || this._core.settings.autoplaySpeed);
    }, this), d || this._core.settings.autoplayTimeout);
  }, e.prototype._setAutoPlayInterval = function () {
    this._timeout = this._getNextTimeout();
  }, e.prototype.stop = function () {
    this._core.is("rotating") && (b.clearTimeout(this._timeout), this._core.leave("rotating"));
  }, e.prototype.pause = function () {
    this._core.is("rotating") && (this._paused = !0);
  }, e.prototype.destroy = function () {
    var a, b;
    this.stop();
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  "use strict";

  var e = function e(b) {
    this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = {
      next: this._core.next,
      prev: this._core.prev,
      to: this._core.to
    }, this._handlers = {
      "prepared.owl.carousel": a.proxy(function (b) {
        b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
      }, this),
      "added.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop());
      }, this),
      "remove.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1);
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && this.draw();
      }, this),
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"));
      }, this),
      "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"));
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers);
  };
  e.Defaults = {
    nav: !1,
    navText: ["prev", "next"],
    navSpeed: !1,
    navElement: "div",
    navContainer: !1,
    navContainerClass: "owl-nav",
    navClass: ["owl-prev", "owl-next"],
    slideBy: 1,
    dotClass: "owl-dot",
    dotsClass: "owl-dots",
    dots: !0,
    dotsEach: !1,
    dotsData: !1,
    dotsSpeed: !1,
    dotsContainer: !1
  }, e.prototype.initialize = function () {
    var b,
      c = this._core.settings;
    this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.prev(c.navSpeed);
    }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.next(c.navSpeed);
    }, this)), c.dotsData || (this._templates = [a("<div>").addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "div", a.proxy(function (b) {
      var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();
      b.preventDefault(), this.to(d, c.dotsSpeed);
    }, this));
    for (b in this._overrides) {
      this._core[b] = a.proxy(this[b], this);
    }
  }, e.prototype.destroy = function () {
    var a, b, c, d;
    for (a in this._handlers) {
      this.$element.off(a, this._handlers[a]);
    }
    for (b in this._controls) {
      this._controls[b].remove();
    }
    for (d in this.overides) {
      this._core[d] = this._overrides[d];
    }
    for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, e.prototype.update = function () {
    var a,
      b,
      c,
      d = this._core.clones().length / 2,
      e = d + this._core.items().length,
      f = this._core.maximum(!0),
      g = this._core.settings,
      h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;
    if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy) for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) {
      if (b >= h || 0 === b) {
        if (this._pages.push({
          start: Math.min(f, a - d),
          end: a - d + h - 1
        }), Math.min(f, a - d) === f) break;
        b = 0, ++c;
      }
      b += this._core.mergers(this._core.relative(a));
    }
  }, e.prototype.draw = function () {
    var b,
      c = this._core.settings,
      d = this._core.items().length <= c.items,
      e = this._core.relative(this._core.current()),
      f = c.loop || c.rewind;
    this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active"));
  }, e.prototype.onTrigger = function (b) {
    var c = this._core.settings;
    b.page = {
      index: a.inArray(this.current(), this._pages),
      count: this._pages.length,
      size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items)
    };
  }, e.prototype.current = function () {
    var b = this._core.relative(this._core.current());
    return a.grep(this._pages, a.proxy(function (a, c) {
      return a.start <= b && a.end >= b;
    }, this)).pop();
  }, e.prototype.getPosition = function (b) {
    var c,
      d,
      e = this._core.settings;
    return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c;
  }, e.prototype.next = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b);
  }, e.prototype.prev = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b);
  }, e.prototype.to = function (b, c, d) {
    var e;
    !d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c);
  }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  "use strict";

  var e = function e(c) {
    this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = {
      "initialized.owl.carousel": a.proxy(function (c) {
        c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation");
      }, this),
      "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");
          if (!c) return;
          this._hashes[c] = b.content;
        }
      }, this),
      "changed.owl.carousel": a.proxy(function (c) {
        if (c.namespace && "position" === c.property.name) {
          var d = this._core.items(this._core.relative(this._core.current())),
            e = a.map(this._hashes, function (a, b) {
              return a === d ? b : null;
            }).join();
          if (!e || b.location.hash.slice(1) === e) return;
          b.location.hash = e;
        }
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function (a) {
      var c = b.location.hash.substring(1),
        e = this._core.$stage.children(),
        f = this._hashes[c] && e.index(this._hashes[c]);
      f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0);
    }, this));
  };
  e.Defaults = {
    URLhashListener: !1
  }, e.prototype.destroy = function () {
    var c, d;
    a(b).off("hashchange.owl.navigation");
    for (c in this._handlers) {
      this._core.$element.off(c, this._handlers[c]);
    }
    for (d in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[d] && (this[d] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Hash = e;
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
  function e(b, c) {
    var e = !1,
      f = b.charAt(0).toUpperCase() + b.slice(1);
    return a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) {
      if (g[b] !== d) return e = !c || b, !1;
    }), e;
  }
  function f(a) {
    return e(a, !0);
  }
  var g = a("<support>").get(0).style,
    h = "Webkit Moz O ms".split(" "),
    i = {
      transition: {
        end: {
          WebkitTransition: "webkitTransitionEnd",
          MozTransition: "transitionend",
          OTransition: "oTransitionEnd",
          transition: "transitionend"
        }
      },
      animation: {
        end: {
          WebkitAnimation: "webkitAnimationEnd",
          MozAnimation: "animationend",
          OAnimation: "oAnimationEnd",
          animation: "animationend"
        }
      }
    },
    j = {
      csstransforms: function csstransforms() {
        return !!e("transform");
      },
      csstransforms3d: function csstransforms3d() {
        return !!e("perspective");
      },
      csstransitions: function csstransitions() {
        return !!e("transition");
      },
      cssanimations: function cssanimations() {
        return !!e("animation");
      }
    };
  j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d());
}(window.Zepto || window.jQuery, window, document);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"plugin": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["vendors-node_modules_core-js_modules_es_array_concat_js-node_modules_core-js_modules_es_array-7566e3"], () => (__webpack_require__("./assets/js/custom.js")))
/******/ 	__webpack_require__.O(undefined, ["vendors-node_modules_core-js_modules_es_array_concat_js-node_modules_core-js_modules_es_array-7566e3"], () => (__webpack_require__("./assets/js/jquery.inputmask.bundle.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_core-js_modules_es_array_concat_js-node_modules_core-js_modules_es_array-7566e3"], () => (__webpack_require__("./assets/js/owl.carousel.min.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,